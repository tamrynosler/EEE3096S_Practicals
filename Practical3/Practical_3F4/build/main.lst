ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.text.MX_GPIO_Init,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	MX_GPIO_Init:
  27              	.LFB137:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2025 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** 
  25:Core/Src/main.c **** /* USER CODE END Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  29:Core/Src/main.c **** #define MAX_ITER 100
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** /* USER CODE END PTD */
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 2


  32:Core/Src/main.c **** 
  33:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  34:Core/Src/main.c **** /* USER CODE BEGIN PD */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* USER CODE END PD */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  39:Core/Src/main.c **** /* USER CODE BEGIN PM */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* USER CODE END PM */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  44:Core/Src/main.c **** TIM_HandleTypeDef htim2;
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** /* USER CODE BEGIN PV */
  47:Core/Src/main.c **** //TODO: Define variables you think you might need
  48:Core/Src/main.c **** // - Performance timing variables (e.g execution time, throughput, pixels per second, clock cycles)
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** //Mandelbrot Variables
  51:Core/Src/main.c **** //********************************************************************
  52:Core/Src/main.c ****   uint32_t start_time = 0;
  53:Core/Src/main.c ****   uint32_t end_time = 0;
  54:Core/Src/main.c ****   uint16_t pin_mask = 0;
  55:Core/Src/main.c ****   uint64_t start_cnt, end_cnt; //For cycle counting
  56:Core/Src/main.c **** 
  57:Core/Src/main.c ****   int sizes[] = {128, 160, 192, 224, 256};
  58:Core/Src/main.c ****   int num_sizes = 5;
  59:Core/Src/main.c ****   int rows = 8;
  60:Core/Src/main.c **** 
  61:Core/Src/main.c ****    // Arrays to store results
  62:Core/Src/main.c ****   uint64_t checksums[5];
  63:Core/Src/main.c ****   uint32_t execution_times[5];
  64:Core/Src/main.c ****   uint64_t cycle_cnt[5];
  65:Core/Src/main.c ****   double throughput[5];
  66:Core/Src/main.c **** 
  67:Core/Src/main.c ****   //*******************************************************************
  68:Core/Src/main.c ****   //End Mandelbrot variables
  69:Core/Src/main.c **** 
  70:Core/Src/main.c **** 
  71:Core/Src/main.c **** /* USER CODE END PV */
  72:Core/Src/main.c **** 
  73:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  74:Core/Src/main.c **** void SystemClock_Config(void);
  75:Core/Src/main.c **** static void MX_GPIO_Init(void);
  76:Core/Src/main.c **** static void MX_TIM2_Init(void);
  77:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  78:Core/Src/main.c **** //TODO: Define any function prototypes you might need such as the calculate Mandelbrot function amo
  79:Core/Src/main.c **** 
  80:Core/Src/main.c ****   uint64_t calculate_mandelbrot_fixed_point_arithmetic(int width, int height, int max_iterations);
  81:Core/Src/main.c ****   uint64_t calculate_mandelbrot_double(int width, int height, int max_iterations);
  82:Core/Src/main.c ****   uint64_t mandelbrot_sum_stripe(int width, int height, int y_start, int rows, int max_iterations);
  83:Core/Src/main.c ****   uint64_t calculate_mandelbrot_striped_total(int width, int height, int max_iterations, int stripe
  84:Core/Src/main.c ****   uint64_t calculate_mandelbrot_fixed_point_arithmetic_no_overflow(int width, int height, int max_i
  85:Core/Src/main.c **** 
  86:Core/Src/main.c **** /* USER CODE END PFP */
  87:Core/Src/main.c **** 
  88:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 3


  89:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  90:Core/Src/main.c **** 
  91:Core/Src/main.c **** /* USER CODE END 0 */
  92:Core/Src/main.c **** 
  93:Core/Src/main.c **** /**
  94:Core/Src/main.c ****   * @brief  The application entry point.
  95:Core/Src/main.c ****   * @retval int
  96:Core/Src/main.c ****   */
  97:Core/Src/main.c **** int main(void)
  98:Core/Src/main.c **** {
  99:Core/Src/main.c **** 
 100:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 101:Core/Src/main.c **** 
 102:Core/Src/main.c ****   /* USER CODE END 1 */
 103:Core/Src/main.c **** 
 104:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 105:Core/Src/main.c **** 
 106:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 107:Core/Src/main.c ****   HAL_Init();
 108:Core/Src/main.c **** 
 109:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 110:Core/Src/main.c **** 
 111:Core/Src/main.c ****   /* USER CODE END Init */
 112:Core/Src/main.c **** 
 113:Core/Src/main.c ****   /* Configure the system clock */
 114:Core/Src/main.c ****   SystemClock_Config();
 115:Core/Src/main.c **** 
 116:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 117:Core/Src/main.c **** 
 118:Core/Src/main.c ****   /* USER CODE END SysInit */
 119:Core/Src/main.c **** 
 120:Core/Src/main.c ****   /* Initialize all configured peripherals */
 121:Core/Src/main.c ****   MX_GPIO_Init();
 122:Core/Src/main.c ****   MX_TIM2_Init();
 123:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 124:Core/Src/main.c **** 
 125:Core/Src/main.c ****   /* USER CODE END 2 */
 126:Core/Src/main.c **** 
 127:Core/Src/main.c ****   /* Infinite loop */
 128:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 129:Core/Src/main.c ****   //while (1)
 130:Core/Src/main.c ****   //{
 131:Core/Src/main.c ****     /* USER CODE END WHILE */
 132:Core/Src/main.c **** 
 133:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 134:Core/Src/main.c **** 
 135:Core/Src/main.c ****     //Start timer 2 (used to measure cycles)
 136:Core/Src/main.c ****     //TIM2 is initialised to be at the same frequency as the CPU
 137:Core/Src/main.c ****      HAL_TIM_Base_Start(&htim2);
 138:Core/Src/main.c **** 
 139:Core/Src/main.c **** 	  //TODO: Visual indicator: Turn on LED0 to signal processing start
 140:Core/Src/main.c **** 	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 141:Core/Src/main.c **** 
 142:Core/Src/main.c **** 
 143:Core/Src/main.c **** 
 144:Core/Src/main.c **** 
 145:Core/Src/main.c **** 	  //TODO: Benchmark and Profile Performance
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 4


 146:Core/Src/main.c **** 
 147:Core/Src/main.c **** 	  //Automatically step through all image sizes
 148:Core/Src/main.c **** 	  for (int i = 0; i < num_sizes; i++)
 149:Core/Src/main.c **** 	    {
 150:Core/Src/main.c **** 	        int current_size = sizes[i];
 151:Core/Src/main.c **** 
 152:Core/Src/main.c **** 			  //Start time
 153:Core/Src/main.c **** 			  start_time = HAL_GetTick();
 154:Core/Src/main.c **** 
 155:Core/Src/main.c **** 			  //Start cycles
 156:Core/Src/main.c **** 			  start_cnt = __HAL_TIM_GET_COUNTER(&htim2);
 157:Core/Src/main.c **** 
 158:Core/Src/main.c **** 			  //Call mandelbrot function
 159:Core/Src/main.c **** 			  checksums[i] = calculate_mandelbrot_fixed_point_arithmetic_no_overflow(current_size, current_s
 160:Core/Src/main.c **** 			  //using striping
 161:Core/Src/main.c **** 			  //checksums[i] = calculate_mandelbrot_striped_total(current_size, 1080, MAX_ITER, rows);
 162:Core/Src/main.c **** 			  //checksum = calculate_mandelbrot_double(256, 256, MAX_ITER);
 163:Core/Src/main.c **** 
 164:Core/Src/main.c **** 			  //End time
 165:Core/Src/main.c **** 			  end_time = HAL_GetTick();
 166:Core/Src/main.c **** 			  // Cycle counter end
 167:Core/Src/main.c **** 			  end_cnt = __HAL_TIM_GET_COUNTER(&htim2);
 168:Core/Src/main.c **** 
 169:Core/Src/main.c **** 
 170:Core/Src/main.c **** 
 171:Core/Src/main.c **** 			  execution_times[i] = end_time - start_time;
 172:Core/Src/main.c **** 			  throughput[i] = (current_size*current_size)/(execution_times[i]/1000.0); //Throughput in pixel
 173:Core/Src/main.c **** 
 174:Core/Src/main.c **** 			  //Cycle count (accounting for overflow of TIM2)
 175:Core/Src/main.c **** 			  //Multiplying by 2 because TIM2 is scaled down by 2 compared to system clock
 176:Core/Src/main.c **** 			  if (end_cnt >= start_cnt)
 177:Core/Src/main.c **** 				  cycle_cnt[i] = 2*(end_cnt - start_cnt);
 178:Core/Src/main.c **** 			  else
 179:Core/Src/main.c **** 				  cycle_cnt[i] = 2*((0xFFFFFFFF - start_cnt) + end_cnt + 1);
 180:Core/Src/main.c **** 
 181:Core/Src/main.c **** 
 182:Core/Src/main.c **** 
 183:Core/Src/main.c **** 
 184:Core/Src/main.c **** 			  //TODO: Visual indicator: Turn on LED1 to signal processing start
 185:Core/Src/main.c **** 				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 186:Core/Src/main.c **** 
 187:Core/Src/main.c **** 			  //TODO: Keep the LEDs ON for 2s
 188:Core/Src/main.c **** 				HAL_Delay(2000);
 189:Core/Src/main.c **** 
 190:Core/Src/main.c **** 			  //TODO: Turn OFF LEDs
 191:Core/Src/main.c **** 				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 192:Core/Src/main.c **** 				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 193:Core/Src/main.c **** 	    }
 194:Core/Src/main.c ****   }
 195:Core/Src/main.c ****   /* USER CODE END 3 */
 196:Core/Src/main.c **** 
 197:Core/Src/main.c **** 
 198:Core/Src/main.c **** /**
 199:Core/Src/main.c ****   * @brief System Clock Configuration
 200:Core/Src/main.c ****   * @retval None
 201:Core/Src/main.c ****   */
 202:Core/Src/main.c **** void SystemClock_Config(void)
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 5


 203:Core/Src/main.c **** {
 204:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 205:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 206:Core/Src/main.c **** 
 207:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 208:Core/Src/main.c ****   */
 209:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 210:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 211:Core/Src/main.c **** 
 212:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 213:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 214:Core/Src/main.c ****   */
 215:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 216:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 217:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 218:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 219:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 15;
 220:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 144;
 221:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 222:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 223:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 224:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 225:Core/Src/main.c ****   {
 226:Core/Src/main.c ****     Error_Handler();
 227:Core/Src/main.c ****   }
 228:Core/Src/main.c **** 
 229:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 230:Core/Src/main.c ****   */
 231:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 232:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 233:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 234:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 235:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 236:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 237:Core/Src/main.c **** 
 238:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 239:Core/Src/main.c ****   {
 240:Core/Src/main.c ****     Error_Handler();
 241:Core/Src/main.c ****   }
 242:Core/Src/main.c **** }
 243:Core/Src/main.c **** 
 244:Core/Src/main.c **** /**
 245:Core/Src/main.c ****   * @brief TIM2 Initialization Function
 246:Core/Src/main.c ****   * @param None
 247:Core/Src/main.c ****   * @retval None
 248:Core/Src/main.c ****   */
 249:Core/Src/main.c **** static void MX_TIM2_Init(void)
 250:Core/Src/main.c **** {
 251:Core/Src/main.c **** 
 252:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 0 */
 253:Core/Src/main.c **** 
 254:Core/Src/main.c ****   /* USER CODE END TIM2_Init 0 */
 255:Core/Src/main.c **** 
 256:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 257:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 258:Core/Src/main.c **** 
 259:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 1 */
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 6


 260:Core/Src/main.c **** 
 261:Core/Src/main.c ****   /* USER CODE END TIM2_Init 1 */
 262:Core/Src/main.c ****   htim2.Instance = TIM2;
 263:Core/Src/main.c ****   htim2.Init.Prescaler = 0;
 264:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 265:Core/Src/main.c ****   htim2.Init.Period = 4294967295;
 266:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 267:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 268:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 269:Core/Src/main.c ****   {
 270:Core/Src/main.c ****     Error_Handler();
 271:Core/Src/main.c ****   }
 272:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 273:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 274:Core/Src/main.c ****   {
 275:Core/Src/main.c ****     Error_Handler();
 276:Core/Src/main.c ****   }
 277:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 278:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 279:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 280:Core/Src/main.c ****   {
 281:Core/Src/main.c ****     Error_Handler();
 282:Core/Src/main.c ****   }
 283:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 2 */
 284:Core/Src/main.c **** 
 285:Core/Src/main.c ****   /* USER CODE END TIM2_Init 2 */
 286:Core/Src/main.c **** 
 287:Core/Src/main.c **** }
 288:Core/Src/main.c **** 
 289:Core/Src/main.c **** /**
 290:Core/Src/main.c ****   * @brief GPIO Initialization Function
 291:Core/Src/main.c ****   * @param None
 292:Core/Src/main.c ****   * @retval None
 293:Core/Src/main.c ****   */
 294:Core/Src/main.c **** static void MX_GPIO_Init(void)
 295:Core/Src/main.c **** {
  28              		.loc 1 295 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 32
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 30B5     		push	{r4, r5, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 12
  35              		.cfi_offset 4, -12
  36              		.cfi_offset 5, -8
  37              		.cfi_offset 14, -4
  38 0002 89B0     		sub	sp, sp, #36
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 48
 296:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  41              		.loc 1 296 3 view .LVU1
  42              		.loc 1 296 20 is_stmt 0 view .LVU2
  43 0004 0024     		movs	r4, #0
  44 0006 0394     		str	r4, [sp, #12]
  45 0008 0494     		str	r4, [sp, #16]
  46 000a 0594     		str	r4, [sp, #20]
  47 000c 0694     		str	r4, [sp, #24]
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 7


  48 000e 0794     		str	r4, [sp, #28]
 297:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_1 */
 298:Core/Src/main.c **** 
 299:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_1 */
 300:Core/Src/main.c **** 
 301:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 302:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  49              		.loc 1 302 3 is_stmt 1 view .LVU3
  50              	.LBB4:
  51              		.loc 1 302 3 view .LVU4
  52 0010 0094     		str	r4, [sp]
  53              		.loc 1 302 3 view .LVU5
  54 0012 184B     		ldr	r3, .L3
  55 0014 1A6B     		ldr	r2, [r3, #48]
  56 0016 42F00402 		orr	r2, r2, #4
  57 001a 1A63     		str	r2, [r3, #48]
  58              		.loc 1 302 3 view .LVU6
  59 001c 1A6B     		ldr	r2, [r3, #48]
  60 001e 02F00402 		and	r2, r2, #4
  61 0022 0092     		str	r2, [sp]
  62              		.loc 1 302 3 view .LVU7
  63 0024 009A     		ldr	r2, [sp]
  64              	.LBE4:
  65              		.loc 1 302 3 view .LVU8
 303:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  66              		.loc 1 303 3 view .LVU9
  67              	.LBB5:
  68              		.loc 1 303 3 view .LVU10
  69 0026 0194     		str	r4, [sp, #4]
  70              		.loc 1 303 3 view .LVU11
  71 0028 1A6B     		ldr	r2, [r3, #48]
  72 002a 42F08002 		orr	r2, r2, #128
  73 002e 1A63     		str	r2, [r3, #48]
  74              		.loc 1 303 3 view .LVU12
  75 0030 1A6B     		ldr	r2, [r3, #48]
  76 0032 02F08002 		and	r2, r2, #128
  77 0036 0192     		str	r2, [sp, #4]
  78              		.loc 1 303 3 view .LVU13
  79 0038 019A     		ldr	r2, [sp, #4]
  80              	.LBE5:
  81              		.loc 1 303 3 view .LVU14
 304:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  82              		.loc 1 304 3 view .LVU15
  83              	.LBB6:
  84              		.loc 1 304 3 view .LVU16
  85 003a 0294     		str	r4, [sp, #8]
  86              		.loc 1 304 3 view .LVU17
  87 003c 1A6B     		ldr	r2, [r3, #48]
  88 003e 42F00202 		orr	r2, r2, #2
  89 0042 1A63     		str	r2, [r3, #48]
  90              		.loc 1 304 3 view .LVU18
  91 0044 1B6B     		ldr	r3, [r3, #48]
  92 0046 03F00203 		and	r3, r3, #2
  93 004a 0293     		str	r3, [sp, #8]
  94              		.loc 1 304 3 view .LVU19
  95 004c 029B     		ldr	r3, [sp, #8]
  96              	.LBE6:
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 8


  97              		.loc 1 304 3 view .LVU20
 305:Core/Src/main.c **** 
 306:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 307:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
  98              		.loc 1 307 3 view .LVU21
  99 004e 0A4D     		ldr	r5, .L3+4
 100 0050 2246     		mov	r2, r4
 101 0052 FF21     		movs	r1, #255
 102 0054 2846     		mov	r0, r5
 103 0056 FFF7FEFF 		bl	HAL_GPIO_WritePin
 104              	.LVL0:
 308:Core/Src/main.c ****                           |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 309:Core/Src/main.c **** 
 310:Core/Src/main.c ****   /*Configure GPIO pins : PB0 PB1 PB2 PB3
 311:Core/Src/main.c ****                            PB4 PB5 PB6 PB7 */
 312:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 105              		.loc 1 312 3 view .LVU22
 106              		.loc 1 312 23 is_stmt 0 view .LVU23
 107 005a FF23     		movs	r3, #255
 108 005c 0393     		str	r3, [sp, #12]
 313:Core/Src/main.c ****                           |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 314:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 109              		.loc 1 314 3 is_stmt 1 view .LVU24
 110              		.loc 1 314 24 is_stmt 0 view .LVU25
 111 005e 0123     		movs	r3, #1
 112 0060 0493     		str	r3, [sp, #16]
 315:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 113              		.loc 1 315 3 is_stmt 1 view .LVU26
 114              		.loc 1 315 24 is_stmt 0 view .LVU27
 115 0062 0594     		str	r4, [sp, #20]
 316:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 116              		.loc 1 316 3 is_stmt 1 view .LVU28
 117              		.loc 1 316 25 is_stmt 0 view .LVU29
 118 0064 0694     		str	r4, [sp, #24]
 317:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 119              		.loc 1 317 3 is_stmt 1 view .LVU30
 120 0066 03A9     		add	r1, sp, #12
 121 0068 2846     		mov	r0, r5
 122 006a FFF7FEFF 		bl	HAL_GPIO_Init
 123              	.LVL1:
 318:Core/Src/main.c **** 
 319:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_2 */
 320:Core/Src/main.c **** 
 321:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_2 */
 322:Core/Src/main.c **** }
 124              		.loc 1 322 1 is_stmt 0 view .LVU31
 125 006e 09B0     		add	sp, sp, #36
 126              	.LCFI2:
 127              		.cfi_def_cfa_offset 12
 128              		@ sp needed
 129 0070 30BD     		pop	{r4, r5, pc}
 130              	.L4:
 131 0072 00BF     		.align	2
 132              	.L3:
 133 0074 00380240 		.word	1073887232
 134 0078 00040240 		.word	1073873920
 135              		.cfi_endproc
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 9


 136              	.LFE137:
 138              		.section	.text.calculate_mandelbrot_fixed_point_arithmetic,"ax",%progbits
 139              		.align	1
 140              		.global	calculate_mandelbrot_fixed_point_arithmetic
 141              		.syntax unified
 142              		.thumb
 143              		.thumb_func
 145              	calculate_mandelbrot_fixed_point_arithmetic:
 146              	.LVL2:
 147              	.LFB138:
 323:Core/Src/main.c **** 
 324:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 325:Core/Src/main.c **** //TODO: Function signatures you defined previously , implement them here
 326:Core/Src/main.c **** 
 327:Core/Src/main.c **** 	//Start Mandelbrot functions
 328:Core/Src/main.c **** //*************************************************************************************************
 329:Core/Src/main.c **** 	uint64_t calculate_mandelbrot_fixed_point_arithmetic(int width, int height, int max_iterations){
 148              		.loc 1 329 97 is_stmt 1 view -0
 149              		.cfi_startproc
 150              		@ args = 0, pretend = 0, frame = 16
 151              		@ frame_needed = 0, uses_anonymous_args = 0
 152              		.loc 1 329 97 is_stmt 0 view .LVU33
 153 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 154              	.LCFI3:
 155              		.cfi_def_cfa_offset 36
 156              		.cfi_offset 4, -36
 157              		.cfi_offset 5, -32
 158              		.cfi_offset 6, -28
 159              		.cfi_offset 7, -24
 160              		.cfi_offset 8, -20
 161              		.cfi_offset 9, -16
 162              		.cfi_offset 10, -12
 163              		.cfi_offset 11, -8
 164              		.cfi_offset 14, -4
 165 0004 85B0     		sub	sp, sp, #20
 166              	.LCFI4:
 167              		.cfi_def_cfa_offset 56
 168 0006 0746     		mov	r7, r0
 169 0008 8B46     		mov	fp, r1
 170 000a 1646     		mov	r6, r2
 330:Core/Src/main.c **** 	  uint64_t mandelbrot_sum = 0;
 171              		.loc 1 330 4 is_stmt 1 view .LVU34
 172              	.LVL3:
 331:Core/Src/main.c **** 
 332:Core/Src/main.c **** 
 333:Core/Src/main.c **** 
 334:Core/Src/main.c **** 		int s = 1000000; //10^4 scale factor (so that overflow doesn't occur on 32bit ints)
 173              		.loc 1 334 3 view .LVU35
 335:Core/Src/main.c **** 		int s3_5 = 3.5*s;
 174              		.loc 1 335 3 view .LVU36
 336:Core/Src/main.c **** 		int s2_5 = 2.5*s;
 175              		.loc 1 336 3 view .LVU37
 337:Core/Src/main.c **** 		int x_0 = 0;
 176              		.loc 1 337 3 view .LVU38
 338:Core/Src/main.c **** 		int y_0 = 0;
 177              		.loc 1 338 3 view .LVU39
 339:Core/Src/main.c **** 		int x_i;
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 10


 178              		.loc 1 339 3 view .LVU40
 340:Core/Src/main.c **** 		int y_i;
 179              		.loc 1 340 3 view .LVU41
 341:Core/Src/main.c **** 		uint64_t iteration;
 180              		.loc 1 341 3 view .LVU42
 342:Core/Src/main.c **** 		int64_t temp; //Prevent overflow by making 64bit
 181              		.loc 1 342 3 view .LVU43
 343:Core/Src/main.c **** 
 344:Core/Src/main.c **** 		for (uint32_t y = 0; y <= height-1; y++)
 182              		.loc 1 344 3 view .LVU44
 183              	.LBB7:
 184              		.loc 1 344 8 view .LVU45
 185              		.loc 1 344 17 is_stmt 0 view .LVU46
 186 000c 0021     		movs	r1, #0
 187              	.LVL4:
 188              		.loc 1 344 17 view .LVU47
 189              	.LBE7:
 330:Core/Src/main.c **** 
 190              		.loc 1 330 13 view .LVU48
 191 000e 0C46     		mov	r4, r1
 192 0010 8A46     		mov	r10, r1
 193 0012 CDF80CB0 		str	fp, [sp, #12]
 194              	.LBB10:
 195              		.loc 1 344 3 view .LVU49
 196 0016 64E0     		b	.L6
 197              	.LVL5:
 198              	.L9:
 199              	.LBB8:
 345:Core/Src/main.c **** 		{
 346:Core/Src/main.c **** 			for (uint32_t x = 0; x <= width-1; x++)
 347:Core/Src/main.c **** 			{
 348:Core/Src/main.c **** 				x_0 = ((((x*s)/width))*(s3_5)/s - (s2_5));
 349:Core/Src/main.c **** 				y_0 = ((((y*s)/height))*(2*s)/s - (s));
 350:Core/Src/main.c **** 				x_i = 0;
 351:Core/Src/main.c **** 				y_i = 0;
 352:Core/Src/main.c **** 				iteration = 0;
 353:Core/Src/main.c **** 				while (iteration < max_iterations && (x_i*x_i + y_i*y_i)<= 4*s*s)
 354:Core/Src/main.c **** 				{
 355:Core/Src/main.c **** 					temp = x_i*x_i/s - y_i*y_i/s;
 200              		.loc 1 355 6 is_stmt 1 view .LVU50
 201              		.loc 1 355 20 is_stmt 0 view .LVU51
 202 0018 394F     		ldr	r7, .L16
 203 001a 87FB04B8 		smull	fp, r8, r7, r4
 204 001e E417     		asrs	r4, r4, #31
 205 0020 C4EBA844 		rsb	r4, r4, r8, asr #18
 206              		.loc 1 355 32 view .LVU52
 207 0024 87FB02B8 		smull	fp, r8, r7, r2
 208 0028 D217     		asrs	r2, r2, #31
 209 002a C2EBA842 		rsb	r2, r2, r8, asr #18
 210              		.loc 1 355 23 view .LVU53
 211 002e A21A     		subs	r2, r4, r2
 212              	.LVL6:
 356:Core/Src/main.c **** 					y_i = 2*x_i*y_i/s + y_0;
 213              		.loc 1 356 6 is_stmt 1 view .LVU54
 214              		.loc 1 356 17 is_stmt 0 view .LVU55
 215 0030 05FB03F3 		mul	r3, r5, r3
 216              	.LVL7:
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 11


 217              		.loc 1 356 17 view .LVU56
 218 0034 5B00     		lsls	r3, r3, #1
 219              		.loc 1 356 21 view .LVU57
 220 0036 87FB0347 		smull	r4, r7, r7, r3
 221 003a DB17     		asrs	r3, r3, #31
 222 003c C3EBA743 		rsb	r3, r3, r7, asr #18
 223              		.loc 1 356 10 view .LVU58
 224 0040 03EB0E05 		add	r5, r3, lr
 225              	.LVL8:
 357:Core/Src/main.c **** 					x_i = temp + x_0;
 226              		.loc 1 357 6 is_stmt 1 view .LVU59
 227              		.loc 1 357 17 is_stmt 0 view .LVU60
 228 0044 02EB0A03 		add	r3, r2, r10
 229              	.LVL9:
 358:Core/Src/main.c **** 					iteration = iteration+1;
 230              		.loc 1 358 6 is_stmt 1 view .LVU61
 231              		.loc 1 358 16 is_stmt 0 view .LVU62
 232 0048 0130     		adds	r0, r0, #1
 233              	.LVL10:
 234              		.loc 1 358 16 view .LVU63
 235 004a 4CF1000C 		adc	ip, ip, #0
 236              	.LVL11:
 237              	.L7:
 353:Core/Src/main.c **** 				{
 238              		.loc 1 353 39 is_stmt 1 view .LVU64
 353:Core/Src/main.c **** 				{
 239              		.loc 1 353 22 is_stmt 0 view .LVU65
 240 004e F217     		asrs	r2, r6, #31
 353:Core/Src/main.c **** 				{
 241              		.loc 1 353 39 view .LVU66
 242 0050 B042     		cmp	r0, r6
 243 0052 7CEB0202 		sbcs	r2, ip, r2
 244 0056 08D2     		bcs	.L8
 353:Core/Src/main.c **** 				{
 245              		.loc 1 353 46 discriminator 1 view .LVU67
 246 0058 03FB03F4 		mul	r4, r3, r3
 353:Core/Src/main.c **** 				{
 247              		.loc 1 353 56 discriminator 1 view .LVU68
 248 005c 05FB05F2 		mul	r2, r5, r5
 353:Core/Src/main.c **** 				{
 249              		.loc 1 353 51 discriminator 1 view .LVU69
 250 0060 04EB0208 		add	r8, r4, r2
 353:Core/Src/main.c **** 				{
 251              		.loc 1 353 39 discriminator 1 view .LVU70
 252 0064 274F     		ldr	r7, .L16+4
 253 0066 B845     		cmp	r8, r7
 254 0068 D6DD     		ble	.L9
 255              	.L8:
 359:Core/Src/main.c **** 				}
 360:Core/Src/main.c **** 				mandelbrot_sum = mandelbrot_sum + iteration;
 256              		.loc 1 360 20 view .LVU71
 257 006a DDF80080 		ldr	r8, [sp]
 258 006e 019F     		ldr	r7, [sp, #4]
 259              		.loc 1 360 5 is_stmt 1 view .LVU72
 260              		.loc 1 360 20 is_stmt 0 view .LVU73
 261 0070 0818     		adds	r0, r1, r0
 262              	.LVL12:
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 12


 263              		.loc 1 360 20 view .LVU74
 264 0072 0146     		mov	r1, r0
 265              	.LVL13:
 266              		.loc 1 360 20 view .LVU75
 267 0074 4CEB0909 		adc	r9, ip, r9
 268              	.LVL14:
 346:Core/Src/main.c **** 			{
 269              		.loc 1 346 40 is_stmt 1 discriminator 2 view .LVU76
 270 0078 08F10108 		add	r8, r8, #1
 271              	.LVL15:
 272              	.L11:
 346:Core/Src/main.c **** 			{
 273              		.loc 1 346 27 discriminator 1 view .LVU77
 346:Core/Src/main.c **** 			{
 274              		.loc 1 346 35 is_stmt 0 discriminator 1 view .LVU78
 275 007c 7B1E     		subs	r3, r7, #1
 346:Core/Src/main.c **** 			{
 276              		.loc 1 346 27 discriminator 1 view .LVU79
 277 007e 4345     		cmp	r3, r8
 278 0080 2BD3     		bcc	.L14
 348:Core/Src/main.c **** 				y_0 = ((((y*s)/height))*(2*s)/s - (s));
 279              		.loc 1 348 5 is_stmt 1 view .LVU80
 348:Core/Src/main.c **** 				y_0 = ((((y*s)/height))*(2*s)/s - (s));
 280              		.loc 1 348 16 is_stmt 0 view .LVU81
 281 0082 214B     		ldr	r3, .L16+8
 282 0084 03FB08F2 		mul	r2, r3, r8
 348:Core/Src/main.c **** 				y_0 = ((((y*s)/height))*(2*s)/s - (s));
 283              		.loc 1 348 19 view .LVU82
 284 0088 B2FBF7F2 		udiv	r2, r2, r7
 348:Core/Src/main.c **** 				y_0 = ((((y*s)/height))*(2*s)/s - (s));
 285              		.loc 1 348 27 view .LVU83
 286 008c 1F48     		ldr	r0, .L16+12
 287 008e 00FB02F2 		mul	r2, r0, r2
 348:Core/Src/main.c **** 				y_0 = ((((y*s)/height))*(2*s)/s - (s));
 288              		.loc 1 348 34 view .LVU84
 289 0092 00F18640 		add	r0, r0, #1124073472
 290 0096 A0F5CC10 		sub	r0, r0, #1671168
 291 009a A0F65D10 		subw	r0, r0, #2397
 292 009e A0FB0252 		umull	r5, r2, r0, r2
 348:Core/Src/main.c **** 				y_0 = ((((y*s)/height))*(2*s)/s - (s));
 293              		.loc 1 348 37 view .LVU85
 294 00a2 1B4D     		ldr	r5, .L16+16
 295 00a4 05EB924A 		add	r10, r5, r2, lsr #18
 296              	.LVL16:
 349:Core/Src/main.c **** 				x_i = 0;
 297              		.loc 1 349 5 is_stmt 1 view .LVU86
 349:Core/Src/main.c **** 				x_i = 0;
 298              		.loc 1 349 16 is_stmt 0 view .LVU87
 299 00a8 029A     		ldr	r2, [sp, #8]
 300 00aa 03FB02FE 		mul	lr, r3, r2
 349:Core/Src/main.c **** 				x_i = 0;
 301              		.loc 1 349 19 view .LVU88
 302 00ae 039B     		ldr	r3, [sp, #12]
 303 00b0 BEFBF3FE 		udiv	lr, lr, r3
 349:Core/Src/main.c **** 				x_i = 0;
 304              		.loc 1 349 28 view .LVU89
 305 00b4 174B     		ldr	r3, .L16+20
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 13


 306 00b6 03FB0EFE 		mul	lr, r3, lr
 349:Core/Src/main.c **** 				x_i = 0;
 307              		.loc 1 349 34 view .LVU90
 308 00ba A0FB0E0E 		umull	r0, lr, r0, lr
 309 00be 4FEA9E4E 		lsr	lr, lr, #18
 349:Core/Src/main.c **** 				x_i = 0;
 310              		.loc 1 349 37 view .LVU91
 311 00c2 AEF5742E 		sub	lr, lr, #999424
 312 00c6 AEF5107E 		sub	lr, lr, #576
 313              	.LVL17:
 350:Core/Src/main.c **** 				y_i = 0;
 314              		.loc 1 350 5 is_stmt 1 view .LVU92
 351:Core/Src/main.c **** 				iteration = 0;
 315              		.loc 1 351 5 view .LVU93
 352:Core/Src/main.c **** 				while (iteration < max_iterations && (x_i*x_i + y_i*y_i)<= 4*s*s)
 316              		.loc 1 352 5 view .LVU94
 353:Core/Src/main.c **** 				{
 317              		.loc 1 353 5 view .LVU95
 352:Core/Src/main.c **** 				while (iteration < max_iterations && (x_i*x_i + y_i*y_i)<= 4*s*s)
 318              		.loc 1 352 15 is_stmt 0 view .LVU96
 319 00ca 0020     		movs	r0, #0
 320 00cc 8446     		mov	ip, r0
 351:Core/Src/main.c **** 				iteration = 0;
 321              		.loc 1 351 9 view .LVU97
 322 00ce 0546     		mov	r5, r0
 350:Core/Src/main.c **** 				y_i = 0;
 323              		.loc 1 350 9 view .LVU98
 324 00d0 0346     		mov	r3, r0
 325 00d2 CDF80080 		str	r8, [sp]
 326 00d6 0197     		str	r7, [sp, #4]
 353:Core/Src/main.c **** 				{
 327              		.loc 1 353 11 view .LVU99
 328 00d8 B9E7     		b	.L7
 329              	.LVL18:
 330              	.L14:
 353:Core/Src/main.c **** 				{
 331              		.loc 1 353 11 view .LVU100
 332              	.LBE8:
 344:Core/Src/main.c **** 		{
 333              		.loc 1 344 40 discriminator 2 view .LVU101
 334 00da 0C46     		mov	r4, r1
 335 00dc 0299     		ldr	r1, [sp, #8]
 336              	.LVL19:
 344:Core/Src/main.c **** 		{
 337              		.loc 1 344 40 discriminator 2 view .LVU102
 338 00de CA46     		mov	r10, r9
 344:Core/Src/main.c **** 		{
 339              		.loc 1 344 40 is_stmt 1 discriminator 2 view .LVU103
 340 00e0 0131     		adds	r1, r1, #1
 341              	.LVL20:
 342              	.L6:
 344:Core/Src/main.c **** 		{
 343              		.loc 1 344 26 discriminator 1 view .LVU104
 344:Core/Src/main.c **** 		{
 344              		.loc 1 344 35 is_stmt 0 discriminator 1 view .LVU105
 345 00e2 039B     		ldr	r3, [sp, #12]
 346 00e4 013B     		subs	r3, r3, #1
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 14


 344:Core/Src/main.c **** 		{
 347              		.loc 1 344 26 discriminator 1 view .LVU106
 348 00e6 8B42     		cmp	r3, r1
 349 00e8 05D3     		bcc	.L15
 350              	.LBB9:
 346:Core/Src/main.c **** 			{
 351              		.loc 1 346 18 view .LVU107
 352 00ea 4FF00008 		mov	r8, #0
 353 00ee 0291     		str	r1, [sp, #8]
 354 00f0 2146     		mov	r1, r4
 355              	.LVL21:
 346:Core/Src/main.c **** 			{
 356              		.loc 1 346 18 view .LVU108
 357 00f2 D146     		mov	r9, r10
 358 00f4 C2E7     		b	.L11
 359              	.LVL22:
 360              	.L15:
 346:Core/Src/main.c **** 			{
 361              		.loc 1 346 18 view .LVU109
 362              	.LBE9:
 363              	.LBE10:
 361:Core/Src/main.c **** 			}
 362:Core/Src/main.c **** 		}
 363:Core/Src/main.c **** 		return mandelbrot_sum;
 364              		.loc 1 363 3 is_stmt 1 view .LVU110
 364:Core/Src/main.c **** 
 365:Core/Src/main.c **** 	}
 365              		.loc 1 365 2 is_stmt 0 view .LVU111
 366 00f6 2046     		mov	r0, r4
 367 00f8 5146     		mov	r1, r10
 368              	.LVL23:
 369              		.loc 1 365 2 view .LVU112
 370 00fa 05B0     		add	sp, sp, #20
 371              	.LCFI5:
 372              		.cfi_def_cfa_offset 36
 373              		@ sp needed
 374 00fc BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 375              	.LVL24:
 376              	.L17:
 377              		.loc 1 365 2 view .LVU113
 378              		.align	2
 379              	.L16:
 380 0100 83DE1B43 		.word	1125899907
 381 0104 00409452 		.word	1385447424
 382 0108 40420F00 		.word	1000000
 383 010c E0673500 		.word	3500000
 384 0110 60DAD9FF 		.word	-2500000
 385 0114 80841E00 		.word	2000000
 386              		.cfi_endproc
 387              	.LFE138:
 389              		.global	__aeabi_ldivmod
 390              		.section	.text.calculate_mandelbrot_fixed_point_arithmetic_no_overflow,"ax",%progbits
 391              		.align	1
 392              		.global	calculate_mandelbrot_fixed_point_arithmetic_no_overflow
 393              		.syntax unified
 394              		.thumb
 395              		.thumb_func
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 15


 397              	calculate_mandelbrot_fixed_point_arithmetic_no_overflow:
 398              	.LVL25:
 399              	.LFB139:
 366:Core/Src/main.c **** 	uint64_t calculate_mandelbrot_fixed_point_arithmetic_no_overflow(int width, int height, int max_it
 400              		.loc 1 366 109 is_stmt 1 view -0
 401              		.cfi_startproc
 402              		@ args = 0, pretend = 0, frame = 56
 403              		@ frame_needed = 0, uses_anonymous_args = 0
 404              		.loc 1 366 109 is_stmt 0 view .LVU115
 405 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 406              	.LCFI6:
 407              		.cfi_def_cfa_offset 36
 408              		.cfi_offset 4, -36
 409              		.cfi_offset 5, -32
 410              		.cfi_offset 6, -28
 411              		.cfi_offset 7, -24
 412              		.cfi_offset 8, -20
 413              		.cfi_offset 9, -16
 414              		.cfi_offset 10, -12
 415              		.cfi_offset 11, -8
 416              		.cfi_offset 14, -4
 417 0004 8FB0     		sub	sp, sp, #60
 418              	.LCFI7:
 419              		.cfi_def_cfa_offset 96
 420 0006 0D90     		str	r0, [sp, #52]
 421 0008 0C91     		str	r1, [sp, #48]
 422 000a 0292     		str	r2, [sp, #8]
 367:Core/Src/main.c **** 	  uint64_t mandelbrot_sum = 0;
 423              		.loc 1 367 4 is_stmt 1 view .LVU116
 424              	.LVL26:
 368:Core/Src/main.c **** 
 369:Core/Src/main.c **** 		int64_t s = 1000000;
 425              		.loc 1 369 3 view .LVU117
 370:Core/Src/main.c **** 		int64_t s3_5 = 3.5*s;
 426              		.loc 1 370 3 view .LVU118
 371:Core/Src/main.c **** 		int64_t s2_5 = 2.5*s;
 427              		.loc 1 371 3 view .LVU119
 372:Core/Src/main.c **** 		int64_t x_0 = 0;
 428              		.loc 1 372 3 view .LVU120
 373:Core/Src/main.c **** 		int64_t y_0 = 0;
 429              		.loc 1 373 3 view .LVU121
 374:Core/Src/main.c **** 		int64_t x_i;
 430              		.loc 1 374 3 view .LVU122
 375:Core/Src/main.c **** 		int64_t y_i;
 431              		.loc 1 375 3 view .LVU123
 376:Core/Src/main.c **** 		uint64_t iteration;
 432              		.loc 1 376 3 view .LVU124
 377:Core/Src/main.c **** 		int64_t temp; //Prevent overflow by making 64bit
 433              		.loc 1 377 3 view .LVU125
 378:Core/Src/main.c **** 
 379:Core/Src/main.c **** 		for (uint32_t y = 0; y <= height-1; y++)
 434              		.loc 1 379 3 view .LVU126
 435              	.LBB11:
 436              		.loc 1 379 8 view .LVU127
 437              		.loc 1 379 17 is_stmt 0 view .LVU128
 438 000c 0027     		movs	r7, #0
 439              	.LBE11:
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 16


 367:Core/Src/main.c **** 
 440              		.loc 1 367 13 view .LVU129
 441 000e 0897     		str	r7, [sp, #32]
 442 0010 0997     		str	r7, [sp, #36]
 443              	.LBB14:
 444              		.loc 1 379 3 view .LVU130
 445 0012 D8E0     		b	.L19
 446              	.LVL27:
 447              	.L22:
 448              	.LBB12:
 380:Core/Src/main.c **** 		{
 381:Core/Src/main.c **** 			for (uint32_t x = 0; x <= width-1; x++)
 382:Core/Src/main.c **** 			{
 383:Core/Src/main.c **** 				x_0 = ((((x*s)/width))*(s3_5)/s - (s2_5));
 384:Core/Src/main.c **** 				y_0 = ((((y*s)/height))*(2*s)/s - (s));
 385:Core/Src/main.c **** 				x_i = 0;
 386:Core/Src/main.c **** 				y_i = 0;
 387:Core/Src/main.c **** 				iteration = 0;
 388:Core/Src/main.c **** 				while (iteration < max_iterations && (x_i*x_i + y_i*y_i)<= 4*s*s)
 389:Core/Src/main.c **** 				{
 390:Core/Src/main.c **** 					temp = x_i*x_i/s - y_i*y_i/s;
 449              		.loc 1 390 6 is_stmt 1 view .LVU131
 450              		.loc 1 390 20 is_stmt 0 view .LVU132
 451 0014 744A     		ldr	r2, .L29
 452 0016 0023     		movs	r3, #0
 453 0018 FFF7FEFF 		bl	__aeabi_ldivmod
 454              	.LVL28:
 455 001c 0191     		str	r1, [sp, #4]
 456 001e 8046     		mov	r8, r0
 457              		.loc 1 390 32 view .LVU133
 458 0020 714A     		ldr	r2, .L29
 459 0022 0023     		movs	r3, #0
 460 0024 5046     		mov	r0, r10
 461 0026 4946     		mov	r1, r9
 462 0028 FFF7FEFF 		bl	__aeabi_ldivmod
 463              	.LVL29:
 464              		.loc 1 390 11 view .LVU134
 465 002c B8EB0008 		subs	r8, r8, r0
 466 0030 019B     		ldr	r3, [sp, #4]
 467 0032 63EB0109 		sbc	r9, r3, r1
 468              	.LVL30:
 391:Core/Src/main.c **** 					y_i = 2*x_i*y_i/s + y_0;
 469              		.loc 1 391 6 is_stmt 1 view .LVU135
 470              		.loc 1 391 17 is_stmt 0 view .LVU136
 471 0036 04FB07F1 		mul	r1, r4, r7
 472 003a 05FB0611 		mla	r1, r5, r6, r1
 473 003e A4FB0545 		umull	r4, r5, r4, r5
 474              	.LVL31:
 475              		.loc 1 391 17 view .LVU137
 476 0042 2944     		add	r1, r1, r5
 477 0044 2019     		adds	r0, r4, r4
 478              		.loc 1 391 21 view .LVU138
 479 0046 684A     		ldr	r2, .L29
 480 0048 4FF00003 		mov	r3, #0
 481 004c 4941     		adcs	r1, r1, r1
 482 004e FFF7FEFF 		bl	__aeabi_ldivmod
 483              	.LVL32:
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 17


 484              		.loc 1 391 10 view .LVU139
 485 0052 059B     		ldr	r3, [sp, #20]
 486 0054 1D18     		adds	r5, r3, r0
 487 0056 069B     		ldr	r3, [sp, #24]
 488 0058 43EB0107 		adc	r7, r3, r1
 489              	.LVL33:
 392:Core/Src/main.c **** 					x_i = temp + x_0;
 490              		.loc 1 392 6 is_stmt 1 view .LVU140
 491              		.loc 1 392 10 is_stmt 0 view .LVU141
 492 005c 039B     		ldr	r3, [sp, #12]
 493 005e 13EB0804 		adds	r4, r3, r8
 494 0062 049B     		ldr	r3, [sp, #16]
 495 0064 43EB0906 		adc	r6, r3, r9
 496              	.LVL34:
 393:Core/Src/main.c **** 					iteration = iteration+1;
 497              		.loc 1 393 6 is_stmt 1 view .LVU142
 498              		.loc 1 393 16 is_stmt 0 view .LVU143
 499 0068 009B     		ldr	r3, [sp]
 500 006a 0133     		adds	r3, r3, #1
 501 006c 0093     		str	r3, [sp]
 502              	.LVL35:
 503              		.loc 1 393 16 view .LVU144
 504 006e 4BF1000B 		adc	fp, fp, #0
 505              	.LVL36:
 506              	.L20:
 388:Core/Src/main.c **** 				{
 507              		.loc 1 388 39 is_stmt 1 view .LVU145
 388:Core/Src/main.c **** 				{
 508              		.loc 1 388 22 is_stmt 0 view .LVU146
 509 0072 029A     		ldr	r2, [sp, #8]
 510 0074 D317     		asrs	r3, r2, #31
 388:Core/Src/main.c **** 				{
 511              		.loc 1 388 39 view .LVU147
 512 0076 0099     		ldr	r1, [sp]
 513 0078 9142     		cmp	r1, r2
 514 007a 7BEB0303 		sbcs	r3, fp, r3
 515 007e 16D2     		bcs	.L21
 388:Core/Src/main.c **** 				{
 516              		.loc 1 388 46 discriminator 1 view .LVU148
 517 0080 04FB06F3 		mul	r3, r4, r6
 518 0084 A4FB0401 		umull	r0, r1, r4, r4
 519 0088 01EB4301 		add	r1, r1, r3, lsl #1
 388:Core/Src/main.c **** 				{
 520              		.loc 1 388 56 discriminator 1 view .LVU149
 521 008c 05FB07F3 		mul	r3, r5, r7
 522 0090 A5FB05A9 		umull	r10, r9, r5, r5
 523 0094 09EB4309 		add	r9, r9, r3, lsl #1
 388:Core/Src/main.c **** 				{
 524              		.loc 1 388 51 discriminator 1 view .LVU150
 525 0098 10EB0A03 		adds	r3, r0, r10
 526 009c 41EB0902 		adc	r2, r1, r9
 388:Core/Src/main.c **** 				{
 527              		.loc 1 388 39 discriminator 1 view .LVU151
 528 00a0 DFF854C1 		ldr	ip, .L29+16
 529 00a4 9C45     		cmp	ip, r3
 530 00a6 40F2A333 		movw	r3, #931
 531 00aa 9341     		sbcs	r3, r3, r2
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 18


 532 00ac B2DA     		bge	.L22
 533              	.L21:
 394:Core/Src/main.c **** 				}
 395:Core/Src/main.c **** 				mandelbrot_sum = mandelbrot_sum + iteration;
 534              		.loc 1 395 20 view .LVU152
 535 00ae DDF828A0 		ldr	r10, [sp, #40]
 536 00b2 D846     		mov	r8, fp
 537 00b4 DDF800B0 		ldr	fp, [sp]
 538              	.LVL37:
 539              		.loc 1 395 5 is_stmt 1 view .LVU153
 540              		.loc 1 395 20 is_stmt 0 view .LVU154
 541 00b8 089B     		ldr	r3, [sp, #32]
 542 00ba 13EB0B03 		adds	r3, r3, fp
 543 00be 0893     		str	r3, [sp, #32]
 544              	.LVL38:
 545              		.loc 1 395 20 view .LVU155
 546 00c0 099B     		ldr	r3, [sp, #36]
 547 00c2 48EB0303 		adc	r3, r8, r3
 548 00c6 0993     		str	r3, [sp, #36]
 381:Core/Src/main.c **** 			{
 549              		.loc 1 381 40 is_stmt 1 discriminator 2 view .LVU156
 550 00c8 079B     		ldr	r3, [sp, #28]
 551 00ca 0133     		adds	r3, r3, #1
 552 00cc 0793     		str	r3, [sp, #28]
 553              	.LVL39:
 554              	.L24:
 381:Core/Src/main.c **** 			{
 555              		.loc 1 381 27 discriminator 1 view .LVU157
 381:Core/Src/main.c **** 			{
 556              		.loc 1 381 35 is_stmt 0 discriminator 1 view .LVU158
 557 00ce 0AF1FF33 		add	r3, r10, #-1
 381:Core/Src/main.c **** 			{
 558              		.loc 1 381 27 discriminator 1 view .LVU159
 559 00d2 079A     		ldr	r2, [sp, #28]
 560 00d4 9342     		cmp	r3, r2
 561 00d6 74D3     		bcc	.L27
 383:Core/Src/main.c **** 				y_0 = ((((y*s)/height))*(2*s)/s - (s));
 562              		.loc 1 383 5 is_stmt 1 view .LVU160
 383:Core/Src/main.c **** 				y_0 = ((((y*s)/height))*(2*s)/s - (s));
 563              		.loc 1 383 16 is_stmt 0 view .LVU161
 564 00d8 0026     		movs	r6, #0
 565 00da 079C     		ldr	r4, [sp, #28]
 566 00dc E20E     		lsrs	r2, r4, #27
 567 00de 6301     		lsls	r3, r4, #5
 568 00e0 1B1B     		subs	r3, r3, r4
 569 00e2 62F10002 		sbc	r2, r2, #0
 570 00e6 5202     		lsls	r2, r2, #9
 571 00e8 42EAD352 		orr	r2, r2, r3, lsr #23
 572 00ec 5B02     		lsls	r3, r3, #9
 573 00ee 1B19     		adds	r3, r3, r4
 574 00f0 42F10002 		adc	r2, r2, #0
 575 00f4 9101     		lsls	r1, r2, #6
 576 00f6 41EA9361 		orr	r1, r1, r3, lsr #26
 577 00fa 9801     		lsls	r0, r3, #6
 578 00fc C01A     		subs	r0, r0, r3
 579 00fe 61EB0201 		sbc	r1, r1, r2
 580 0102 0019     		adds	r0, r0, r4
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 19


 383:Core/Src/main.c **** 				y_0 = ((((y*s)/height))*(2*s)/s - (s));
 581              		.loc 1 383 19 view .LVU162
 582 0104 5246     		mov	r2, r10
 583 0106 4FEAEA73 		asr	r3, r10, #31
 584 010a 41F10001 		adc	r1, r1, #0
 585 010e FFF7FEFF 		bl	__aeabi_ldivmod
 586              	.LVL40:
 383:Core/Src/main.c **** 				y_0 = ((((y*s)/height))*(2*s)/s - (s));
 587              		.loc 1 383 27 view .LVU163
 588 0112 364C     		ldr	r4, .L29+4
 589 0114 A0FB0405 		umull	r0, r5, r0, r4
 383:Core/Src/main.c **** 				y_0 = ((((y*s)/height))*(2*s)/s - (s));
 590              		.loc 1 383 34 view .LVU164
 591 0118 334A     		ldr	r2, .L29
 592 011a 0023     		movs	r3, #0
 593 011c 04FB0151 		mla	r1, r4, r1, r5
 594 0120 FFF7FEFF 		bl	__aeabi_ldivmod
 595              	.LVL41:
 383:Core/Src/main.c **** 				y_0 = ((((y*s)/height))*(2*s)/s - (s));
 596              		.loc 1 383 9 view .LVU165
 597 0124 324B     		ldr	r3, .L29+8
 598 0126 1B18     		adds	r3, r3, r0
 599 0128 0393     		str	r3, [sp, #12]
 600 012a 61F10003 		sbc	r3, r1, #0
 601 012e 0493     		str	r3, [sp, #16]
 602              	.LVL42:
 384:Core/Src/main.c **** 				x_i = 0;
 603              		.loc 1 384 5 is_stmt 1 view .LVU166
 384:Core/Src/main.c **** 				x_i = 0;
 604              		.loc 1 384 16 is_stmt 0 view .LVU167
 605 0130 0B9C     		ldr	r4, [sp, #44]
 606 0132 E20E     		lsrs	r2, r4, #27
 607 0134 6301     		lsls	r3, r4, #5
 608              	.LVL43:
 384:Core/Src/main.c **** 				x_i = 0;
 609              		.loc 1 384 16 view .LVU168
 610 0136 1B1B     		subs	r3, r3, r4
 611 0138 62F10002 		sbc	r2, r2, #0
 612 013c 5202     		lsls	r2, r2, #9
 613 013e 42EAD352 		orr	r2, r2, r3, lsr #23
 614 0142 5B02     		lsls	r3, r3, #9
 615 0144 1B19     		adds	r3, r3, r4
 616 0146 42F10002 		adc	r2, r2, #0
 617 014a 9101     		lsls	r1, r2, #6
 618 014c 41EA9361 		orr	r1, r1, r3, lsr #26
 619 0150 9801     		lsls	r0, r3, #6
 620 0152 C01A     		subs	r0, r0, r3
 621 0154 61EB0201 		sbc	r1, r1, r2
 622 0158 0019     		adds	r0, r0, r4
 384:Core/Src/main.c **** 				x_i = 0;
 623              		.loc 1 384 19 view .LVU169
 624 015a 0C9B     		ldr	r3, [sp, #48]
 625 015c 1A46     		mov	r2, r3
 626 015e 4FEAE373 		asr	r3, r3, #31
 627 0162 41F10001 		adc	r1, r1, #0
 628 0166 FFF7FEFF 		bl	__aeabi_ldivmod
 629              	.LVL44:
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 20


 630 016a 0546     		mov	r5, r0
 384:Core/Src/main.c **** 				x_i = 0;
 631              		.loc 1 384 28 view .LVU170
 632 016c 4C01     		lsls	r4, r1, #5
 633 016e 44EAD064 		orr	r4, r4, r0, lsr #27
 634 0172 4001     		lsls	r0, r0, #5
 635 0174 421B     		subs	r2, r0, r5
 636 0176 64EB0100 		sbc	r0, r4, r1
 637 017a 8301     		lsls	r3, r0, #6
 638 017c 43EA9263 		orr	r3, r3, r2, lsr #26
 639 0180 9401     		lsls	r4, r2, #6
 640 0182 A41A     		subs	r4, r4, r2
 641 0184 63EB0003 		sbc	r3, r3, r0
 642 0188 DB00     		lsls	r3, r3, #3
 643 018a 43EA5473 		orr	r3, r3, r4, lsr #29
 644 018e E400     		lsls	r4, r4, #3
 645 0190 6419     		adds	r4, r4, r5
 646 0192 43EB0101 		adc	r1, r3, r1
 647 0196 C901     		lsls	r1, r1, #7
 384:Core/Src/main.c **** 				x_i = 0;
 648              		.loc 1 384 34 view .LVU171
 649 0198 134A     		ldr	r2, .L29
 650 019a 0023     		movs	r3, #0
 651 019c E001     		lsls	r0, r4, #7
 652 019e 41EA5461 		orr	r1, r1, r4, lsr #25
 653 01a2 FFF7FEFF 		bl	__aeabi_ldivmod
 654              	.LVL45:
 384:Core/Src/main.c **** 				x_i = 0;
 655              		.loc 1 384 9 view .LVU172
 656 01a6 134B     		ldr	r3, .L29+12
 657 01a8 1B18     		adds	r3, r3, r0
 658 01aa 0593     		str	r3, [sp, #20]
 659 01ac 61F10003 		sbc	r3, r1, #0
 660 01b0 0693     		str	r3, [sp, #24]
 661              	.LVL46:
 385:Core/Src/main.c **** 				y_i = 0;
 662              		.loc 1 385 5 is_stmt 1 view .LVU173
 386:Core/Src/main.c **** 				iteration = 0;
 663              		.loc 1 386 5 view .LVU174
 387:Core/Src/main.c **** 				while (iteration < max_iterations && (x_i*x_i + y_i*y_i)<= 4*s*s)
 664              		.loc 1 387 5 view .LVU175
 388:Core/Src/main.c **** 				{
 665              		.loc 1 388 5 view .LVU176
 387:Core/Src/main.c **** 				while (iteration < max_iterations && (x_i*x_i + y_i*y_i)<= 4*s*s)
 666              		.loc 1 387 15 is_stmt 0 view .LVU177
 667 01b2 B346     		mov	fp, r6
 386:Core/Src/main.c **** 				iteration = 0;
 668              		.loc 1 386 9 view .LVU178
 669 01b4 3546     		mov	r5, r6
 670 01b6 3746     		mov	r7, r6
 385:Core/Src/main.c **** 				y_i = 0;
 671              		.loc 1 385 9 view .LVU179
 672 01b8 3446     		mov	r4, r6
 673 01ba CDF828A0 		str	r10, [sp, #40]
 674 01be 0096     		str	r6, [sp]
 388:Core/Src/main.c **** 				{
 675              		.loc 1 388 11 view .LVU180
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 21


 676 01c0 57E7     		b	.L20
 677              	.LVL47:
 678              	.L27:
 388:Core/Src/main.c **** 				{
 679              		.loc 1 388 11 view .LVU181
 680              	.LBE12:
 379:Core/Src/main.c **** 		{
 681              		.loc 1 379 40 discriminator 2 view .LVU182
 682 01c2 0B9F     		ldr	r7, [sp, #44]
 379:Core/Src/main.c **** 		{
 683              		.loc 1 379 40 is_stmt 1 discriminator 2 view .LVU183
 684 01c4 0137     		adds	r7, r7, #1
 685              	.LVL48:
 686              	.L19:
 379:Core/Src/main.c **** 		{
 687              		.loc 1 379 26 discriminator 1 view .LVU184
 379:Core/Src/main.c **** 		{
 688              		.loc 1 379 35 is_stmt 0 discriminator 1 view .LVU185
 689 01c6 0C9B     		ldr	r3, [sp, #48]
 690 01c8 013B     		subs	r3, r3, #1
 379:Core/Src/main.c **** 		{
 691              		.loc 1 379 26 discriminator 1 view .LVU186
 692 01ca BB42     		cmp	r3, r7
 693 01cc 07D3     		bcc	.L28
 694              	.LBB13:
 381:Core/Src/main.c **** 			{
 695              		.loc 1 381 18 view .LVU187
 696 01ce 4FF00008 		mov	r8, #0
 697 01d2 0B97     		str	r7, [sp, #44]
 698 01d4 CDF81C80 		str	r8, [sp, #28]
 699 01d8 DDF834A0 		ldr	r10, [sp, #52]
 700 01dc 77E7     		b	.L24
 701              	.L28:
 381:Core/Src/main.c **** 			{
 702              		.loc 1 381 18 view .LVU188
 703              	.LBE13:
 704              	.LBE14:
 396:Core/Src/main.c **** 			}
 397:Core/Src/main.c **** 		}
 398:Core/Src/main.c **** 		return mandelbrot_sum;
 705              		.loc 1 398 3 is_stmt 1 view .LVU189
 399:Core/Src/main.c **** 
 400:Core/Src/main.c **** 	}
 706              		.loc 1 400 2 is_stmt 0 view .LVU190
 707 01de 0898     		ldr	r0, [sp, #32]
 708 01e0 0999     		ldr	r1, [sp, #36]
 709 01e2 0FB0     		add	sp, sp, #60
 710              	.LCFI8:
 711              		.cfi_def_cfa_offset 36
 712              		@ sp needed
 713 01e4 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 714              	.LVL49:
 715              	.L30:
 716              		.loc 1 400 2 view .LVU191
 717              		.align	2
 718              	.L29:
 719 01e8 40420F00 		.word	1000000
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 22


 720 01ec E0673500 		.word	3500000
 721 01f0 60DAD9FF 		.word	-2500000
 722 01f4 C0BDF0FF 		.word	-1000000
 723 01f8 00409452 		.word	1385447424
 724              		.cfi_endproc
 725              	.LFE139:
 727              		.section	.text.mandelbrot_sum_stripe,"ax",%progbits
 728              		.align	1
 729              		.global	mandelbrot_sum_stripe
 730              		.syntax unified
 731              		.thumb
 732              		.thumb_func
 734              	mandelbrot_sum_stripe:
 735              	.LVL50:
 736              	.LFB140:
 401:Core/Src/main.c **** 
 402:Core/Src/main.c **** 	uint64_t mandelbrot_sum_stripe(
 403:Core/Src/main.c **** 	    int width, int height,
 404:Core/Src/main.c **** 	    int y_start, int rows,
 405:Core/Src/main.c **** 	    int max_iterations)
 406:Core/Src/main.c **** 	{
 737              		.loc 1 406 2 is_stmt 1 view -0
 738              		.cfi_startproc
 739              		@ args = 4, pretend = 0, frame = 24
 740              		@ frame_needed = 0, uses_anonymous_args = 0
 741              		.loc 1 406 2 is_stmt 0 view .LVU193
 742 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 743              	.LCFI9:
 744              		.cfi_def_cfa_offset 36
 745              		.cfi_offset 4, -36
 746              		.cfi_offset 5, -32
 747              		.cfi_offset 6, -28
 748              		.cfi_offset 7, -24
 749              		.cfi_offset 8, -20
 750              		.cfi_offset 9, -16
 751              		.cfi_offset 10, -12
 752              		.cfi_offset 11, -8
 753              		.cfi_offset 14, -4
 754 0004 87B0     		sub	sp, sp, #28
 755              	.LCFI10:
 756              		.cfi_def_cfa_offset 64
 757 0006 DDF84080 		ldr	r8, [sp, #64]
 407:Core/Src/main.c **** 	    if (rows <= 0 || y_start >= height) return 0;
 758              		.loc 1 407 6 is_stmt 1 view .LVU194
 759              		.loc 1 407 9 is_stmt 0 view .LVU195
 760 000a 002B     		cmp	r3, #0
 761              		.loc 1 407 9 view .LVU196
 762 000c 7EDD     		ble	.L40
 763 000e 0746     		mov	r7, r0
 764 0010 0846     		mov	r0, r1
 765              	.LVL51:
 766              		.loc 1 407 9 view .LVU197
 767 0012 1146     		mov	r1, r2
 768              	.LVL52:
 769              		.loc 1 407 20 discriminator 2 view .LVU198
 770 0014 8242     		cmp	r2, r0
 771 0016 80F28180 		bge	.L41
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 23


 408:Core/Src/main.c **** 	    int y_end = y_start + rows;
 772              		.loc 1 408 6 is_stmt 1 view .LVU199
 773              		.loc 1 408 10 is_stmt 0 view .LVU200
 774 001a 9A18     		adds	r2, r3, r2
 775              	.LVL53:
 409:Core/Src/main.c **** 	    if (y_end > height) y_end = height;
 776              		.loc 1 409 6 is_stmt 1 view .LVU201
 777              		.loc 1 409 9 is_stmt 0 view .LVU202
 778 001c 9042     		cmp	r0, r2
 779 001e 00DA     		bge	.L33
 780              		.loc 1 409 32 discriminator 1 view .LVU203
 781 0020 0246     		mov	r2, r0
 782              	.LVL54:
 783              	.L33:
 410:Core/Src/main.c **** 
 411:Core/Src/main.c **** 	    uint64_t mandelbrot_sum = 0;
 784              		.loc 1 411 6 is_stmt 1 view .LVU204
 412:Core/Src/main.c **** 
 413:Core/Src/main.c **** 	    int s = 10000; //10^4 scale factor (so that overflow doesn't occur on 32bit ints)
 785              		.loc 1 413 6 view .LVU205
 414:Core/Src/main.c **** 	    int s3_5 = 3.5*s;
 786              		.loc 1 414 6 view .LVU206
 415:Core/Src/main.c **** 	    int s2_5 = 2.5*s;
 787              		.loc 1 415 6 view .LVU207
 416:Core/Src/main.c **** 	    int x_0 = 0;
 788              		.loc 1 416 6 view .LVU208
 417:Core/Src/main.c **** 	    int y_0 = 0;
 789              		.loc 1 417 6 view .LVU209
 418:Core/Src/main.c **** 	    int x_i;
 790              		.loc 1 418 6 view .LVU210
 419:Core/Src/main.c **** 	    int y_i;
 791              		.loc 1 419 6 view .LVU211
 420:Core/Src/main.c **** 	    uint64_t iteration;
 792              		.loc 1 420 6 view .LVU212
 421:Core/Src/main.c **** 	    int64_t temp; //Prevent overflow by making 64bit
 793              		.loc 1 421 6 view .LVU213
 422:Core/Src/main.c **** 
 423:Core/Src/main.c **** 	    for (int y = y_start; y < y_end; ++y) {
 794              		.loc 1 423 6 view .LVU214
 795              	.LBB15:
 796              		.loc 1 423 11 view .LVU215
 797              		.loc 1 423 11 is_stmt 0 view .LVU216
 798              	.LBE15:
 411:Core/Src/main.c **** 
 799              		.loc 1 411 15 view .LVU217
 800 0022 4FF0000B 		mov	fp, #0
 801 0026 DA46     		mov	r10, fp
 802 0028 0592     		str	r2, [sp, #20]
 803 002a 0490     		str	r0, [sp, #16]
 804              	.LBB18:
 805              		.loc 1 423 6 view .LVU218
 806 002c 67E0     		b	.L34
 807              	.LVL55:
 808              	.L37:
 809              	.LBB16:
 424:Core/Src/main.c **** 
 425:Core/Src/main.c **** 	        for (int x = 0; x <= width-1; ++x) {
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 24


 426:Core/Src/main.c **** 	        	x_0 = ((((x*s)/width))*(s3_5)/s - (s2_5));
 427:Core/Src/main.c **** 	        	y_0 = ((((y*s)/height))*(2*s)/s - (s));
 428:Core/Src/main.c **** 	            x_i = 0;
 429:Core/Src/main.c **** 	            y_i = 0;
 430:Core/Src/main.c **** 	            iteration = 0;
 431:Core/Src/main.c **** 
 432:Core/Src/main.c **** 	            while (iteration < max_iterations && (x_i*x_i + y_i*y_i)<= 4*s*s) {
 433:Core/Src/main.c **** 
 434:Core/Src/main.c **** 	            	temp = x_i*x_i/s - y_i*y_i/s;
 810              		.loc 1 434 15 is_stmt 1 view .LVU219
 811              		.loc 1 434 29 is_stmt 0 view .LVU220
 812 002e 3D4C     		ldr	r4, .L46
 813 0030 84FB0197 		smull	r9, r7, r4, r1
 814 0034 C917     		asrs	r1, r1, #31
 815 0036 C1EB2731 		rsb	r1, r1, r7, asr #12
 816              		.loc 1 434 41 view .LVU221
 817 003a 84FB0297 		smull	r9, r7, r4, r2
 818 003e D217     		asrs	r2, r2, #31
 819 0040 C2EB2732 		rsb	r2, r2, r7, asr #12
 820              		.loc 1 434 32 view .LVU222
 821 0044 8A1A     		subs	r2, r1, r2
 822              	.LVL56:
 435:Core/Src/main.c **** 	            	y_i = 2*x_i*y_i/s + y_0;
 823              		.loc 1 435 15 is_stmt 1 view .LVU223
 824              		.loc 1 435 26 is_stmt 0 view .LVU224
 825 0046 05FB03F3 		mul	r3, r5, r3
 826              	.LVL57:
 827              		.loc 1 435 26 view .LVU225
 828 004a 5B00     		lsls	r3, r3, #1
 829              		.loc 1 435 30 view .LVU226
 830 004c 84FB0314 		smull	r1, r4, r4, r3
 831 0050 DB17     		asrs	r3, r3, #31
 832 0052 C3EB2433 		rsb	r3, r3, r4, asr #12
 833              		.loc 1 435 19 view .LVU227
 834 0056 03EB0C05 		add	r5, r3, ip
 835              	.LVL58:
 436:Core/Src/main.c **** 	            	x_i = temp + x_0;
 836              		.loc 1 436 15 is_stmt 1 view .LVU228
 837              		.loc 1 436 26 is_stmt 0 view .LVU229
 838 005a 02EB0E03 		add	r3, r2, lr
 839              	.LVL59:
 437:Core/Src/main.c **** 
 438:Core/Src/main.c **** 	                iteration = iteration +1;
 840              		.loc 1 438 18 is_stmt 1 view .LVU230
 841              		.loc 1 438 28 is_stmt 0 view .LVU231
 842 005e 0130     		adds	r0, r0, #1
 843              	.LVL60:
 844              		.loc 1 438 28 view .LVU232
 845 0060 46F10006 		adc	r6, r6, #0
 846              	.LVL61:
 847              	.L35:
 432:Core/Src/main.c **** 
 848              		.loc 1 432 48 is_stmt 1 view .LVU233
 432:Core/Src/main.c **** 
 849              		.loc 1 432 31 is_stmt 0 view .LVU234
 850 0064 4FEAE872 		asr	r2, r8, #31
 432:Core/Src/main.c **** 
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 25


 851              		.loc 1 432 48 view .LVU235
 852 0068 4045     		cmp	r0, r8
 853 006a 76EB0202 		sbcs	r2, r6, r2
 854 006e 07D2     		bcs	.L36
 432:Core/Src/main.c **** 
 855              		.loc 1 432 55 discriminator 1 view .LVU236
 856 0070 03FB03F1 		mul	r1, r3, r3
 432:Core/Src/main.c **** 
 857              		.loc 1 432 65 discriminator 1 view .LVU237
 858 0074 05FB05F2 		mul	r2, r5, r5
 432:Core/Src/main.c **** 
 859              		.loc 1 432 60 discriminator 1 view .LVU238
 860 0078 8F18     		adds	r7, r1, r2
 432:Core/Src/main.c **** 
 861              		.loc 1 432 48 discriminator 1 view .LVU239
 862 007a 2B4C     		ldr	r4, .L46+4
 863 007c A742     		cmp	r7, r4
 864 007e D6DD     		ble	.L37
 865              	.L36:
 439:Core/Src/main.c **** 	            }
 440:Core/Src/main.c **** 
 441:Core/Src/main.c **** 	            mandelbrot_sum += iteration;
 866              		.loc 1 441 29 view .LVU240
 867 0080 DDF80490 		ldr	r9, [sp, #4]
 868 0084 029F     		ldr	r7, [sp, #8]
 869              		.loc 1 441 14 is_stmt 1 view .LVU241
 870              		.loc 1 441 29 is_stmt 0 view .LVU242
 871 0086 1BEB0000 		adds	r0, fp, r0
 872              	.LVL62:
 873              		.loc 1 441 29 view .LVU243
 874 008a 8346     		mov	fp, r0
 875              	.LVL63:
 876              		.loc 1 441 29 view .LVU244
 877 008c 46EB0A0A 		adc	r10, r6, r10
 878              	.LVL64:
 425:Core/Src/main.c **** 	        	x_0 = ((((x*s)/width))*(s3_5)/s - (s2_5));
 879              		.loc 1 425 40 is_stmt 1 discriminator 2 view .LVU245
 880 0090 09F10109 		add	r9, r9, #1
 881              	.LVL65:
 882              	.L39:
 425:Core/Src/main.c **** 	        	x_0 = ((((x*s)/width))*(s3_5)/s - (s2_5));
 883              		.loc 1 425 28 discriminator 1 view .LVU246
 884 0094 B945     		cmp	r9, r7
 885 0096 30DA     		bge	.L45
 426:Core/Src/main.c **** 	        	y_0 = ((((y*s)/height))*(2*s)/s - (s));
 886              		.loc 1 426 11 view .LVU247
 426:Core/Src/main.c **** 	        	y_0 = ((((y*s)/height))*(2*s)/s - (s));
 887              		.loc 1 426 22 is_stmt 0 view .LVU248
 888 0098 42F2107C 		movw	ip, #10000
 889 009c 0CFB09FE 		mul	lr, ip, r9
 426:Core/Src/main.c **** 	        	y_0 = ((((y*s)/height))*(2*s)/s - (s));
 890              		.loc 1 426 25 view .LVU249
 891 00a0 9EFBF7FE 		sdiv	lr, lr, r7
 426:Core/Src/main.c **** 	        	y_0 = ((((y*s)/height))*(2*s)/s - (s));
 892              		.loc 1 426 33 view .LVU250
 893 00a4 48F6B803 		movw	r3, #35000
 894 00a8 03FB0EFE 		mul	lr, r3, lr
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 26


 426:Core/Src/main.c **** 	        	y_0 = ((((y*s)/height))*(2*s)/s - (s));
 895              		.loc 1 426 40 view .LVU251
 896 00ac 1D4B     		ldr	r3, .L46
 897 00ae 83FB0E02 		smull	r0, r2, r3, lr
 898 00b2 4FEAEE7E 		asr	lr, lr, #31
 899 00b6 CEEB223E 		rsb	lr, lr, r2, asr #12
 426:Core/Src/main.c **** 	        	y_0 = ((((y*s)/height))*(2*s)/s - (s));
 900              		.loc 1 426 15 view .LVU252
 901 00ba AEF5C34E 		sub	lr, lr, #24960
 902 00be AEF1280E 		sub	lr, lr, #40
 903              	.LVL66:
 427:Core/Src/main.c **** 	            x_i = 0;
 904              		.loc 1 427 11 is_stmt 1 view .LVU253
 427:Core/Src/main.c **** 	            x_i = 0;
 905              		.loc 1 427 22 is_stmt 0 view .LVU254
 906 00c2 039A     		ldr	r2, [sp, #12]
 907 00c4 0CFB02FC 		mul	ip, ip, r2
 427:Core/Src/main.c **** 	            x_i = 0;
 908              		.loc 1 427 25 view .LVU255
 909 00c8 049A     		ldr	r2, [sp, #16]
 910 00ca 9CFBF2FC 		sdiv	ip, ip, r2
 427:Core/Src/main.c **** 	            x_i = 0;
 911              		.loc 1 427 34 view .LVU256
 912 00ce 44F62062 		movw	r2, #20000
 913 00d2 02FB0CFC 		mul	ip, r2, ip
 427:Core/Src/main.c **** 	            x_i = 0;
 914              		.loc 1 427 40 view .LVU257
 915 00d6 83FB0C23 		smull	r2, r3, r3, ip
 916 00da 4FEAEC7C 		asr	ip, ip, #31
 917 00de CCEB233C 		rsb	ip, ip, r3, asr #12
 427:Core/Src/main.c **** 	            x_i = 0;
 918              		.loc 1 427 15 view .LVU258
 919 00e2 ACF51C5C 		sub	ip, ip, #9984
 920 00e6 ACF1100C 		sub	ip, ip, #16
 921              	.LVL67:
 428:Core/Src/main.c **** 	            y_i = 0;
 922              		.loc 1 428 14 is_stmt 1 view .LVU259
 429:Core/Src/main.c **** 	            iteration = 0;
 923              		.loc 1 429 14 view .LVU260
 430:Core/Src/main.c **** 
 924              		.loc 1 430 14 view .LVU261
 432:Core/Src/main.c **** 
 925              		.loc 1 432 14 view .LVU262
 430:Core/Src/main.c **** 
 926              		.loc 1 430 24 is_stmt 0 view .LVU263
 927 00ea 0020     		movs	r0, #0
 928 00ec 0646     		mov	r6, r0
 429:Core/Src/main.c **** 	            iteration = 0;
 929              		.loc 1 429 18 view .LVU264
 930 00ee 0546     		mov	r5, r0
 428:Core/Src/main.c **** 	            y_i = 0;
 931              		.loc 1 428 18 view .LVU265
 932 00f0 0346     		mov	r3, r0
 933 00f2 CDF80490 		str	r9, [sp, #4]
 934 00f6 0297     		str	r7, [sp, #8]
 432:Core/Src/main.c **** 
 935              		.loc 1 432 20 view .LVU266
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 27


 936 00f8 B4E7     		b	.L35
 937              	.LVL68:
 938              	.L45:
 432:Core/Src/main.c **** 
 939              		.loc 1 432 20 view .LVU267
 940              	.LBE16:
 423:Core/Src/main.c **** 
 941              		.loc 1 423 39 discriminator 2 view .LVU268
 942 00fa 0399     		ldr	r1, [sp, #12]
 423:Core/Src/main.c **** 
 943              		.loc 1 423 39 is_stmt 1 discriminator 2 view .LVU269
 944 00fc 0131     		adds	r1, r1, #1
 945              	.LVL69:
 946              	.L34:
 423:Core/Src/main.c **** 
 947              		.loc 1 423 30 discriminator 1 view .LVU270
 948 00fe 059B     		ldr	r3, [sp, #20]
 949 0100 8B42     		cmp	r3, r1
 950 0102 06DD     		ble	.L31
 951              	.LBB17:
 425:Core/Src/main.c **** 	        	x_0 = ((((x*s)/width))*(s3_5)/s - (s2_5));
 952              		.loc 1 425 19 is_stmt 0 view .LVU271
 953 0104 4FF00009 		mov	r9, #0
 954 0108 0391     		str	r1, [sp, #12]
 955 010a C3E7     		b	.L39
 956              	.LVL70:
 957              	.L40:
 425:Core/Src/main.c **** 	        	x_0 = ((((x*s)/width))*(s3_5)/s - (s2_5));
 958              		.loc 1 425 19 view .LVU272
 959              	.LBE17:
 960              	.LBE18:
 407:Core/Src/main.c **** 	    int y_end = y_start + rows;
 961              		.loc 1 407 49 discriminator 3 view .LVU273
 962 010c 4FF0000B 		mov	fp, #0
 963 0110 DA46     		mov	r10, fp
 964              	.LVL71:
 965              	.L31:
 442:Core/Src/main.c **** 	        }
 443:Core/Src/main.c **** 	    }
 444:Core/Src/main.c **** 	    return mandelbrot_sum;
 445:Core/Src/main.c **** 	}
 966              		.loc 1 445 2 view .LVU274
 967 0112 5846     		mov	r0, fp
 968 0114 5146     		mov	r1, r10
 969 0116 07B0     		add	sp, sp, #28
 970              	.LCFI11:
 971              		.cfi_remember_state
 972              		.cfi_def_cfa_offset 36
 973              		@ sp needed
 974 0118 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 975              	.LVL72:
 976              	.L41:
 977              	.LCFI12:
 978              		.cfi_restore_state
 407:Core/Src/main.c **** 	    int y_end = y_start + rows;
 979              		.loc 1 407 49 discriminator 3 view .LVU275
 980 011c 4FF0000B 		mov	fp, #0
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 28


 981 0120 DA46     		mov	r10, fp
 982 0122 F6E7     		b	.L31
 983              	.L47:
 984              		.align	2
 985              	.L46:
 986 0124 AD8BDB68 		.word	1759218605
 987 0128 0084D717 		.word	400000000
 988              		.cfi_endproc
 989              	.LFE140:
 991              		.section	.text.calculate_mandelbrot_striped_total,"ax",%progbits
 992              		.align	1
 993              		.global	calculate_mandelbrot_striped_total
 994              		.syntax unified
 995              		.thumb
 996              		.thumb_func
 998              	calculate_mandelbrot_striped_total:
 999              	.LVL73:
 1000              	.LFB141:
 446:Core/Src/main.c **** 
 447:Core/Src/main.c **** 	uint64_t calculate_mandelbrot_striped_total(
 448:Core/Src/main.c **** 	    int width, int height, int max_iterations, int stripe_rows)
 449:Core/Src/main.c **** 	{
 1001              		.loc 1 449 2 is_stmt 1 view -0
 1002              		.cfi_startproc
 1003              		@ args = 0, pretend = 0, frame = 0
 1004              		@ frame_needed = 0, uses_anonymous_args = 0
 1005              		.loc 1 449 2 is_stmt 0 view .LVU277
 1006 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 1007              	.LCFI13:
 1008              		.cfi_def_cfa_offset 32
 1009              		.cfi_offset 4, -32
 1010              		.cfi_offset 5, -28
 1011              		.cfi_offset 6, -24
 1012              		.cfi_offset 7, -20
 1013              		.cfi_offset 8, -16
 1014              		.cfi_offset 9, -12
 1015              		.cfi_offset 10, -8
 1016              		.cfi_offset 14, -4
 1017 0004 82B0     		sub	sp, sp, #8
 1018              	.LCFI14:
 1019              		.cfi_def_cfa_offset 40
 1020 0006 8146     		mov	r9, r0
 1021 0008 0C46     		mov	r4, r1
 1022 000a 9046     		mov	r8, r2
 1023 000c 1F46     		mov	r7, r3
 450:Core/Src/main.c **** 	    uint64_t total = 0;
 1024              		.loc 1 450 6 is_stmt 1 view .LVU278
 1025              	.LVL74:
 451:Core/Src/main.c **** 	    for (int y = 0; y < height; y += stripe_rows) {
 1026              		.loc 1 451 6 view .LVU279
 1027              	.LBB19:
 1028              		.loc 1 451 11 view .LVU280
 1029              		.loc 1 451 15 is_stmt 0 view .LVU281
 1030 000e 0022     		movs	r2, #0
 1031              	.LVL75:
 1032              		.loc 1 451 15 view .LVU282
 1033              	.LBE19:
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 29


 450:Core/Src/main.c **** 	    uint64_t total = 0;
 1034              		.loc 1 450 15 view .LVU283
 1035 0010 9246     		mov	r10, r2
 1036 0012 1646     		mov	r6, r2
 1037              	.LBB22:
 1038              		.loc 1 451 6 view .LVU284
 1039 0014 0CE0     		b	.L49
 1040              	.LVL76:
 1041              	.L52:
 1042              	.LBB20:
 452:Core/Src/main.c **** 	        int rows = (y + stripe_rows <= height) ? stripe_rows : (height - y);
 1043              		.loc 1 452 63 discriminator 2 view .LVU285
 1044 0016 3B46     		mov	r3, r7
 1045              	.L50:
 1046              	.LVL77:
 453:Core/Src/main.c **** 	        total += mandelbrot_sum_stripe(
 1047              		.loc 1 453 10 is_stmt 1 view .LVU286
 1048              		.loc 1 453 19 is_stmt 0 view .LVU287
 1049 0018 CDF80080 		str	r8, [sp]
 1050 001c 2146     		mov	r1, r4
 1051 001e 4846     		mov	r0, r9
 1052 0020 FFF7FEFF 		bl	mandelbrot_sum_stripe
 1053              	.LVL78:
 1054              		.loc 1 453 16 discriminator 1 view .LVU288
 1055 0024 1AEB0000 		adds	r0, r10, r0
 1056 0028 8246     		mov	r10, r0
 1057              	.LVL79:
 1058              		.loc 1 453 16 discriminator 1 view .LVU289
 1059 002a 46EB0106 		adc	r6, r6, r1
 1060              	.LVL80:
 1061              		.loc 1 453 16 discriminator 1 view .LVU290
 1062              	.LBE20:
 451:Core/Src/main.c **** 	    for (int y = 0; y < height; y += stripe_rows) {
 1063              		.loc 1 451 36 is_stmt 1 discriminator 2 view .LVU291
 451:Core/Src/main.c **** 	    for (int y = 0; y < height; y += stripe_rows) {
 1064              		.loc 1 451 36 is_stmt 0 discriminator 2 view .LVU292
 1065 002e 2A46     		mov	r2, r5
 1066              	.LVL81:
 1067              	.L49:
 451:Core/Src/main.c **** 	    for (int y = 0; y < height; y += stripe_rows) {
 1068              		.loc 1 451 24 is_stmt 1 discriminator 1 view .LVU293
 1069 0030 A242     		cmp	r2, r4
 1070 0032 04DA     		bge	.L54
 1071              	.LBB21:
 452:Core/Src/main.c **** 	        int rows = (y + stripe_rows <= height) ? stripe_rows : (height - y);
 1072              		.loc 1 452 10 view .LVU294
 452:Core/Src/main.c **** 	        int rows = (y + stripe_rows <= height) ? stripe_rows : (height - y);
 1073              		.loc 1 452 24 is_stmt 0 view .LVU295
 1074 0034 D519     		adds	r5, r2, r7
 452:Core/Src/main.c **** 	        int rows = (y + stripe_rows <= height) ? stripe_rows : (height - y);
 1075              		.loc 1 452 63 view .LVU296
 1076 0036 A542     		cmp	r5, r4
 1077 0038 EDDD     		ble	.L52
 452:Core/Src/main.c **** 	        int rows = (y + stripe_rows <= height) ? stripe_rows : (height - y);
 1078              		.loc 1 452 63 discriminator 1 view .LVU297
 1079 003a A31A     		subs	r3, r4, r2
 1080 003c ECE7     		b	.L50
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 30


 1081              	.L54:
 452:Core/Src/main.c **** 	        int rows = (y + stripe_rows <= height) ? stripe_rows : (height - y);
 1082              		.loc 1 452 63 discriminator 1 view .LVU298
 1083              	.LBE21:
 1084              	.LBE22:
 454:Core/Src/main.c **** 	                     width, height, y, rows, max_iterations);
 455:Core/Src/main.c **** 	    }
 456:Core/Src/main.c **** 	    return total;
 1085              		.loc 1 456 6 is_stmt 1 view .LVU299
 457:Core/Src/main.c **** 	}
 1086              		.loc 1 457 2 is_stmt 0 view .LVU300
 1087 003e 5046     		mov	r0, r10
 1088 0040 3146     		mov	r1, r6
 1089 0042 02B0     		add	sp, sp, #8
 1090              	.LCFI15:
 1091              		.cfi_def_cfa_offset 32
 1092              		@ sp needed
 1093 0044 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1094              		.loc 1 457 2 view .LVU301
 1095              		.cfi_endproc
 1096              	.LFE141:
 1098              		.global	__aeabi_ui2d
 1099              		.global	__aeabi_i2d
 1100              		.global	__aeabi_ddiv
 1101              		.global	__aeabi_dmul
 1102              		.global	__aeabi_dsub
 1103              		.global	__aeabi_dadd
 1104              		.global	__aeabi_dcmple
 1105              		.section	.text.calculate_mandelbrot_double,"ax",%progbits
 1106              		.align	1
 1107              		.global	calculate_mandelbrot_double
 1108              		.syntax unified
 1109              		.thumb
 1110              		.thumb_func
 1112              	calculate_mandelbrot_double:
 1113              	.LVL82:
 1114              	.LFB142:
 458:Core/Src/main.c **** 
 459:Core/Src/main.c **** 
 460:Core/Src/main.c **** 
 461:Core/Src/main.c **** 
 462:Core/Src/main.c **** 	uint64_t calculate_mandelbrot_double(int width, int height, int max_iterations){
 1115              		.loc 1 462 81 is_stmt 1 view -0
 1116              		.cfi_startproc
 1117              		@ args = 0, pretend = 0, frame = 56
 1118              		@ frame_needed = 0, uses_anonymous_args = 0
 1119              		.loc 1 462 81 is_stmt 0 view .LVU303
 1120 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1121              	.LCFI16:
 1122              		.cfi_def_cfa_offset 36
 1123              		.cfi_offset 4, -36
 1124              		.cfi_offset 5, -32
 1125              		.cfi_offset 6, -28
 1126              		.cfi_offset 7, -24
 1127              		.cfi_offset 8, -20
 1128              		.cfi_offset 9, -16
 1129              		.cfi_offset 10, -12
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 31


 1130              		.cfi_offset 11, -8
 1131              		.cfi_offset 14, -4
 1132 0004 8FB0     		sub	sp, sp, #60
 1133              	.LCFI17:
 1134              		.cfi_def_cfa_offset 96
 1135 0006 0890     		str	r0, [sp, #32]
 1136 0008 0D91     		str	r1, [sp, #52]
 463:Core/Src/main.c **** 
 464:Core/Src/main.c **** 
 465:Core/Src/main.c **** 		uint64_t mandelbrot_sum = 0;
 1137              		.loc 1 465 3 is_stmt 1 view .LVU304
 1138              	.LVL83:
 466:Core/Src/main.c **** 
 467:Core/Src/main.c **** 
 468:Core/Src/main.c **** 
 469:Core/Src/main.c **** 		double x_0;
 1139              		.loc 1 469 3 view .LVU305
 470:Core/Src/main.c **** 		double y_0;
 1140              		.loc 1 470 3 view .LVU306
 471:Core/Src/main.c **** 		double x_i;
 1141              		.loc 1 471 3 view .LVU307
 472:Core/Src/main.c **** 		double y_i;
 1142              		.loc 1 472 3 view .LVU308
 473:Core/Src/main.c **** 		uint64_t iteration;
 1143              		.loc 1 473 3 view .LVU309
 474:Core/Src/main.c **** 		double temp;
 1144              		.loc 1 474 3 view .LVU310
 475:Core/Src/main.c **** 
 476:Core/Src/main.c **** 		for(uint32_t y = 0; y <= height - 1; y++)
 1145              		.loc 1 476 3 view .LVU311
 1146              	.LBB23:
 1147              		.loc 1 476 7 view .LVU312
 1148              		.loc 1 476 16 is_stmt 0 view .LVU313
 1149 000a 4FF0000C 		mov	ip, #0
 1150              	.LBE23:
 465:Core/Src/main.c **** 
 1151              		.loc 1 465 12 view .LVU314
 1152 000e CDF824C0 		str	ip, [sp, #36]
 1153 0012 CDF828C0 		str	ip, [sp, #40]
 1154 0016 0392     		str	r2, [sp, #12]
 1155              	.LBB26:
 1156              		.loc 1 476 3 view .LVU315
 1157 0018 90E0     		b	.L56
 1158              	.LVL84:
 1159              	.L59:
 1160              	.LBB24:
 477:Core/Src/main.c **** 		{
 478:Core/Src/main.c **** 			for(uint32_t x = 0; x <= width - 1; x++)
 479:Core/Src/main.c **** 			{
 480:Core/Src/main.c **** 				x_0 = ((double)(x)/(double)(width))*3.5 - 2.5;
 481:Core/Src/main.c **** 				y_0 = ((double)(y)/(double)(height))*2.0 - 1.0;
 482:Core/Src/main.c **** 				x_i = 0;
 483:Core/Src/main.c **** 				y_i = 0;
 484:Core/Src/main.c **** 				iteration = 0;
 485:Core/Src/main.c **** 				while(iteration < max_iterations && x_i*x_i + y_i*y_i <= 4)
 486:Core/Src/main.c **** 				{
 487:Core/Src/main.c **** 					temp = x_i*x_i - y_i*y_i;
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 32


 1161              		.loc 1 487 6 is_stmt 1 view .LVU316
 1162              		.loc 1 487 11 is_stmt 0 view .LVU317
 1163 001a 4246     		mov	r2, r8
 1164 001c 4B46     		mov	r3, r9
 1165 001e DDE90001 		ldrd	r0, [sp]
 1166 0022 FFF7FEFF 		bl	__aeabi_dsub
 1167              	.LVL85:
 1168 0026 8046     		mov	r8, r0
 1169 0028 8946     		mov	r9, r1
 1170              	.LVL86:
 488:Core/Src/main.c **** 					y_i = 2.0*x_i*y_i + y_0;
 1171              		.loc 1 488 6 is_stmt 1 view .LVU318
 1172              		.loc 1 488 15 is_stmt 0 view .LVU319
 1173 002a 5246     		mov	r2, r10
 1174 002c 5B46     		mov	r3, fp
 1175 002e 5046     		mov	r0, r10
 1176 0030 5946     		mov	r1, fp
 1177 0032 FFF7FEFF 		bl	__aeabi_dadd
 1178              	.LVL87:
 1179              		.loc 1 488 19 view .LVU320
 1180 0036 3246     		mov	r2, r6
 1181 0038 3B46     		mov	r3, r7
 1182 003a FFF7FEFF 		bl	__aeabi_dmul
 1183              	.LVL88:
 1184              		.loc 1 488 10 view .LVU321
 1185 003e DDE90623 		ldrd	r2, [sp, #24]
 1186 0042 FFF7FEFF 		bl	__aeabi_dadd
 1187              	.LVL89:
 1188 0046 0646     		mov	r6, r0
 1189              	.LVL90:
 1190              		.loc 1 488 10 view .LVU322
 1191 0048 0F46     		mov	r7, r1
 1192              	.LVL91:
 489:Core/Src/main.c **** 					x_i = temp + x_0;
 1193              		.loc 1 489 6 is_stmt 1 view .LVU323
 1194              		.loc 1 489 10 is_stmt 0 view .LVU324
 1195 004a 4246     		mov	r2, r8
 1196 004c 4B46     		mov	r3, r9
 1197 004e DDE90401 		ldrd	r0, [sp, #16]
 1198 0052 FFF7FEFF 		bl	__aeabi_dadd
 1199              	.LVL92:
 1200 0056 8246     		mov	r10, r0
 1201              	.LVL93:
 1202              		.loc 1 489 10 view .LVU325
 1203 0058 8B46     		mov	fp, r1
 1204              	.LVL94:
 490:Core/Src/main.c **** 					iteration = iteration + 1;
 1205              		.loc 1 490 6 is_stmt 1 view .LVU326
 1206              		.loc 1 490 16 is_stmt 0 view .LVU327
 1207 005a 0134     		adds	r4, r4, #1
 1208              	.LVL95:
 1209              		.loc 1 490 16 view .LVU328
 1210 005c 45F10005 		adc	r5, r5, #0
 1211              	.LVL96:
 1212              	.L57:
 485:Core/Src/main.c **** 				{
 1213              		.loc 1 485 38 is_stmt 1 view .LVU329
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 33


 485:Core/Src/main.c **** 				{
 1214              		.loc 1 485 21 is_stmt 0 view .LVU330
 1215 0060 039A     		ldr	r2, [sp, #12]
 1216 0062 D317     		asrs	r3, r2, #31
 485:Core/Src/main.c **** 				{
 1217              		.loc 1 485 38 view .LVU331
 1218 0064 9442     		cmp	r4, r2
 1219 0066 75EB0303 		sbcs	r3, r5, r3
 1220 006a 1BD2     		bcs	.L58
 485:Core/Src/main.c **** 				{
 1221              		.loc 1 485 44 discriminator 1 view .LVU332
 1222 006c 5246     		mov	r2, r10
 1223 006e 5B46     		mov	r3, fp
 1224 0070 5046     		mov	r0, r10
 1225 0072 5946     		mov	r1, fp
 1226 0074 FFF7FEFF 		bl	__aeabi_dmul
 1227              	.LVL97:
 1228 0078 CDE90001 		strd	r0, [sp]
 485:Core/Src/main.c **** 				{
 1229              		.loc 1 485 54 discriminator 1 view .LVU333
 1230 007c 3246     		mov	r2, r6
 1231 007e 3B46     		mov	r3, r7
 1232 0080 3046     		mov	r0, r6
 1233 0082 3946     		mov	r1, r7
 1234 0084 FFF7FEFF 		bl	__aeabi_dmul
 1235              	.LVL98:
 1236 0088 8046     		mov	r8, r0
 1237 008a 8946     		mov	r9, r1
 485:Core/Src/main.c **** 				{
 1238              		.loc 1 485 49 discriminator 1 view .LVU334
 1239 008c 0246     		mov	r2, r0
 1240 008e 0B46     		mov	r3, r1
 1241 0090 DDE90001 		ldrd	r0, [sp]
 1242 0094 FFF7FEFF 		bl	__aeabi_dadd
 1243              	.LVL99:
 485:Core/Src/main.c **** 				{
 1244              		.loc 1 485 38 discriminator 1 view .LVU335
 1245 0098 0022     		movs	r2, #0
 1246 009a 2F4B     		ldr	r3, .L66
 1247 009c FFF7FEFF 		bl	__aeabi_dcmple
 1248              	.LVL100:
 1249 00a0 0028     		cmp	r0, #0
 1250 00a2 BAD1     		bne	.L59
 1251              	.L58:
 491:Core/Src/main.c **** 
 492:Core/Src/main.c **** 				}
 493:Core/Src/main.c **** 				mandelbrot_sum = mandelbrot_sum + iteration;
 1252              		.loc 1 493 20 view .LVU336
 1253 00a4 DDF82C90 		ldr	r9, [sp, #44]
 1254              		.loc 1 493 5 is_stmt 1 view .LVU337
 1255              		.loc 1 493 20 is_stmt 0 view .LVU338
 1256 00a8 099B     		ldr	r3, [sp, #36]
 1257 00aa 1C19     		adds	r4, r3, r4
 1258              	.LVL101:
 1259              		.loc 1 493 20 view .LVU339
 1260 00ac 0994     		str	r4, [sp, #36]
 1261              	.LVL102:
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 34


 1262              		.loc 1 493 20 view .LVU340
 1263 00ae 0A9B     		ldr	r3, [sp, #40]
 1264 00b0 45EB0303 		adc	r3, r5, r3
 1265 00b4 0A93     		str	r3, [sp, #40]
 478:Core/Src/main.c **** 			{
 1266              		.loc 1 478 41 is_stmt 1 discriminator 2 view .LVU341
 1267 00b6 09F10109 		add	r9, r9, #1
 1268              	.LVL103:
 1269              	.L61:
 478:Core/Src/main.c **** 			{
 1270              		.loc 1 478 26 discriminator 1 view .LVU342
 478:Core/Src/main.c **** 			{
 1271              		.loc 1 478 35 is_stmt 0 discriminator 1 view .LVU343
 1272 00ba 089B     		ldr	r3, [sp, #32]
 1273 00bc 013B     		subs	r3, r3, #1
 478:Core/Src/main.c **** 			{
 1274              		.loc 1 478 26 discriminator 1 view .LVU344
 1275 00be 4B45     		cmp	r3, r9
 1276 00c0 38D3     		bcc	.L64
 480:Core/Src/main.c **** 				y_0 = ((double)(y)/(double)(height))*2.0 - 1.0;
 1277              		.loc 1 480 5 is_stmt 1 view .LVU345
 480:Core/Src/main.c **** 				y_0 = ((double)(y)/(double)(height))*2.0 - 1.0;
 1278              		.loc 1 480 12 is_stmt 0 view .LVU346
 1279 00c2 4846     		mov	r0, r9
 1280 00c4 FFF7FEFF 		bl	__aeabi_ui2d
 1281              	.LVL104:
 1282 00c8 0446     		mov	r4, r0
 1283 00ca 0D46     		mov	r5, r1
 480:Core/Src/main.c **** 				y_0 = ((double)(y)/(double)(height))*2.0 - 1.0;
 1284              		.loc 1 480 24 view .LVU347
 1285 00cc 0898     		ldr	r0, [sp, #32]
 1286 00ce FFF7FEFF 		bl	__aeabi_i2d
 1287              	.LVL105:
 1288 00d2 0246     		mov	r2, r0
 1289 00d4 0B46     		mov	r3, r1
 480:Core/Src/main.c **** 				y_0 = ((double)(y)/(double)(height))*2.0 - 1.0;
 1290              		.loc 1 480 23 view .LVU348
 1291 00d6 2046     		mov	r0, r4
 1292 00d8 2946     		mov	r1, r5
 1293 00da FFF7FEFF 		bl	__aeabi_ddiv
 1294              	.LVL106:
 480:Core/Src/main.c **** 				y_0 = ((double)(y)/(double)(height))*2.0 - 1.0;
 1295              		.loc 1 480 40 view .LVU349
 1296 00de 0022     		movs	r2, #0
 1297 00e0 1E4B     		ldr	r3, .L66+4
 1298 00e2 FFF7FEFF 		bl	__aeabi_dmul
 1299              	.LVL107:
 480:Core/Src/main.c **** 				y_0 = ((double)(y)/(double)(height))*2.0 - 1.0;
 1300              		.loc 1 480 9 view .LVU350
 1301 00e6 0022     		movs	r2, #0
 1302 00e8 1D4B     		ldr	r3, .L66+8
 1303 00ea FFF7FEFF 		bl	__aeabi_dsub
 1304              	.LVL108:
 1305 00ee CDE90401 		strd	r0, [sp, #16]
 1306              	.LVL109:
 481:Core/Src/main.c **** 				x_i = 0;
 1307              		.loc 1 481 5 is_stmt 1 view .LVU351
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 35


 481:Core/Src/main.c **** 				x_i = 0;
 1308              		.loc 1 481 12 is_stmt 0 view .LVU352
 1309 00f2 0C98     		ldr	r0, [sp, #48]
 1310              	.LVL110:
 481:Core/Src/main.c **** 				x_i = 0;
 1311              		.loc 1 481 12 view .LVU353
 1312 00f4 FFF7FEFF 		bl	__aeabi_ui2d
 1313              	.LVL111:
 1314 00f8 0446     		mov	r4, r0
 1315 00fa 0D46     		mov	r5, r1
 481:Core/Src/main.c **** 				x_i = 0;
 1316              		.loc 1 481 24 view .LVU354
 1317 00fc 0D98     		ldr	r0, [sp, #52]
 1318 00fe FFF7FEFF 		bl	__aeabi_i2d
 1319              	.LVL112:
 1320 0102 0246     		mov	r2, r0
 1321 0104 0B46     		mov	r3, r1
 481:Core/Src/main.c **** 				x_i = 0;
 1322              		.loc 1 481 23 view .LVU355
 1323 0106 2046     		mov	r0, r4
 1324 0108 2946     		mov	r1, r5
 1325 010a FFF7FEFF 		bl	__aeabi_ddiv
 1326              	.LVL113:
 1327 010e 0246     		mov	r2, r0
 1328 0110 0B46     		mov	r3, r1
 481:Core/Src/main.c **** 				x_i = 0;
 1329              		.loc 1 481 41 view .LVU356
 1330 0112 FFF7FEFF 		bl	__aeabi_dadd
 1331              	.LVL114:
 481:Core/Src/main.c **** 				x_i = 0;
 1332              		.loc 1 481 9 view .LVU357
 1333 0116 0022     		movs	r2, #0
 1334 0118 124B     		ldr	r3, .L66+12
 1335 011a FFF7FEFF 		bl	__aeabi_dsub
 1336              	.LVL115:
 1337 011e CDE90601 		strd	r0, [sp, #24]
 1338              	.LVL116:
 482:Core/Src/main.c **** 				y_i = 0;
 1339              		.loc 1 482 5 is_stmt 1 view .LVU358
 483:Core/Src/main.c **** 				iteration = 0;
 1340              		.loc 1 483 5 view .LVU359
 484:Core/Src/main.c **** 				while(iteration < max_iterations && x_i*x_i + y_i*y_i <= 4)
 1341              		.loc 1 484 5 view .LVU360
 485:Core/Src/main.c **** 				{
 1342              		.loc 1 485 5 view .LVU361
 484:Core/Src/main.c **** 				while(iteration < max_iterations && x_i*x_i + y_i*y_i <= 4)
 1343              		.loc 1 484 15 is_stmt 0 view .LVU362
 1344 0122 0024     		movs	r4, #0
 1345 0124 2546     		mov	r5, r4
 483:Core/Src/main.c **** 				iteration = 0;
 1346              		.loc 1 483 9 view .LVU363
 1347 0126 0026     		movs	r6, #0
 1348 0128 0027     		movs	r7, #0
 482:Core/Src/main.c **** 				y_i = 0;
 1349              		.loc 1 482 9 view .LVU364
 1350 012a B246     		mov	r10, r6
 1351 012c BB46     		mov	fp, r7
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 36


 1352 012e CDF82C90 		str	r9, [sp, #44]
 485:Core/Src/main.c **** 				{
 1353              		.loc 1 485 10 view .LVU365
 1354 0132 95E7     		b	.L57
 1355              	.LVL117:
 1356              	.L64:
 485:Core/Src/main.c **** 				{
 1357              		.loc 1 485 10 view .LVU366
 1358              	.LBE24:
 476:Core/Src/main.c **** 		{
 1359              		.loc 1 476 41 discriminator 2 view .LVU367
 1360 0134 DDF830C0 		ldr	ip, [sp, #48]
 476:Core/Src/main.c **** 		{
 1361              		.loc 1 476 41 is_stmt 1 discriminator 2 view .LVU368
 1362 0138 0CF1010C 		add	ip, ip, #1
 1363              	.LVL118:
 1364              	.L56:
 476:Core/Src/main.c **** 		{
 1365              		.loc 1 476 25 discriminator 1 view .LVU369
 476:Core/Src/main.c **** 		{
 1366              		.loc 1 476 35 is_stmt 0 discriminator 1 view .LVU370
 1367 013c 0D9B     		ldr	r3, [sp, #52]
 1368 013e 013B     		subs	r3, r3, #1
 476:Core/Src/main.c **** 		{
 1369              		.loc 1 476 25 discriminator 1 view .LVU371
 1370 0140 6345     		cmp	r3, ip
 1371 0142 04D3     		bcc	.L65
 1372              	.LBB25:
 478:Core/Src/main.c **** 			{
 1373              		.loc 1 478 17 view .LVU372
 1374 0144 4FF00009 		mov	r9, #0
 1375 0148 CDF830C0 		str	ip, [sp, #48]
 1376 014c B5E7     		b	.L61
 1377              	.L65:
 478:Core/Src/main.c **** 			{
 1378              		.loc 1 478 17 view .LVU373
 1379              	.LBE25:
 1380              	.LBE26:
 494:Core/Src/main.c **** 			}
 495:Core/Src/main.c **** 
 496:Core/Src/main.c **** 		}
 497:Core/Src/main.c **** 		return mandelbrot_sum;
 1381              		.loc 1 497 3 is_stmt 1 view .LVU374
 498:Core/Src/main.c **** 	}
 1382              		.loc 1 498 2 is_stmt 0 view .LVU375
 1383 014e 0998     		ldr	r0, [sp, #36]
 1384 0150 0A99     		ldr	r1, [sp, #40]
 1385 0152 0FB0     		add	sp, sp, #60
 1386              	.LCFI18:
 1387              		.cfi_def_cfa_offset 36
 1388              		@ sp needed
 1389 0154 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1390              	.LVL119:
 1391              	.L67:
 1392              		.loc 1 498 2 view .LVU376
 1393              		.align	2
 1394              	.L66:
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 37


 1395 0158 00001040 		.word	1074790400
 1396 015c 00000C40 		.word	1074528256
 1397 0160 00000440 		.word	1074003968
 1398 0164 0000F03F 		.word	1072693248
 1399              		.cfi_endproc
 1400              	.LFE142:
 1402              		.section	.text.Error_Handler,"ax",%progbits
 1403              		.align	1
 1404              		.global	Error_Handler
 1405              		.syntax unified
 1406              		.thumb
 1407              		.thumb_func
 1409              	Error_Handler:
 1410              	.LFB143:
 499:Core/Src/main.c **** 
 500:Core/Src/main.c **** 	//************************************************************************************************
 501:Core/Src/main.c **** 	//End Mandelbrot functions
 502:Core/Src/main.c **** 
 503:Core/Src/main.c **** /* USER CODE END 4 */
 504:Core/Src/main.c **** 
 505:Core/Src/main.c **** /**
 506:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 507:Core/Src/main.c ****   * @retval None
 508:Core/Src/main.c ****   */
 509:Core/Src/main.c **** void Error_Handler(void)
 510:Core/Src/main.c **** {
 1411              		.loc 1 510 1 is_stmt 1 view -0
 1412              		.cfi_startproc
 1413              		@ Volatile: function does not return.
 1414              		@ args = 0, pretend = 0, frame = 0
 1415              		@ frame_needed = 0, uses_anonymous_args = 0
 1416              		@ link register save eliminated.
 511:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 512:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 513:Core/Src/main.c ****   __disable_irq();
 1417              		.loc 1 513 3 view .LVU378
 1418              	.LBB27:
 1419              	.LBI27:
 1420              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 38


  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 39


  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 40


 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 41


 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 42


 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 43


 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 44


 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 45


 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 46


 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 47


 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 48


 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 49


 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 50


 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 51


 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 52


 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 53


 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 54


 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 1421              		.loc 2 960 27 view .LVU379
 1422              	.LBB28:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1423              		.loc 2 962 3 view .LVU380
 1424              		.syntax unified
 1425              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1426 0000 72B6     		cpsid i
 1427              	@ 0 "" 2
 1428              		.thumb
 1429              		.syntax unified
 1430              	.L69:
 1431              	.LBE28:
 1432              	.LBE27:
 514:Core/Src/main.c ****   while (1)
 1433              		.loc 1 514 3 view .LVU381
 515:Core/Src/main.c ****   {
 516:Core/Src/main.c ****   }
 1434              		.loc 1 516 3 view .LVU382
 514:Core/Src/main.c ****   while (1)
 1435              		.loc 1 514 9 view .LVU383
 1436 0002 FEE7     		b	.L69
 1437              		.cfi_endproc
 1438              	.LFE143:
 1440              		.section	.text.MX_TIM2_Init,"ax",%progbits
 1441              		.align	1
 1442              		.syntax unified
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 55


 1443              		.thumb
 1444              		.thumb_func
 1446              	MX_TIM2_Init:
 1447              	.LFB136:
 250:Core/Src/main.c **** 
 1448              		.loc 1 250 1 view -0
 1449              		.cfi_startproc
 1450              		@ args = 0, pretend = 0, frame = 24
 1451              		@ frame_needed = 0, uses_anonymous_args = 0
 1452 0000 00B5     		push	{lr}
 1453              	.LCFI19:
 1454              		.cfi_def_cfa_offset 4
 1455              		.cfi_offset 14, -4
 1456 0002 87B0     		sub	sp, sp, #28
 1457              	.LCFI20:
 1458              		.cfi_def_cfa_offset 32
 256:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1459              		.loc 1 256 3 view .LVU385
 256:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1460              		.loc 1 256 26 is_stmt 0 view .LVU386
 1461 0004 0023     		movs	r3, #0
 1462 0006 0293     		str	r3, [sp, #8]
 1463 0008 0393     		str	r3, [sp, #12]
 1464 000a 0493     		str	r3, [sp, #16]
 1465 000c 0593     		str	r3, [sp, #20]
 257:Core/Src/main.c **** 
 1466              		.loc 1 257 3 is_stmt 1 view .LVU387
 257:Core/Src/main.c **** 
 1467              		.loc 1 257 27 is_stmt 0 view .LVU388
 1468 000e 0093     		str	r3, [sp]
 1469 0010 0193     		str	r3, [sp, #4]
 262:Core/Src/main.c ****   htim2.Init.Prescaler = 0;
 1470              		.loc 1 262 3 is_stmt 1 view .LVU389
 262:Core/Src/main.c ****   htim2.Init.Prescaler = 0;
 1471              		.loc 1 262 18 is_stmt 0 view .LVU390
 1472 0012 1348     		ldr	r0, .L78
 1473 0014 4FF08042 		mov	r2, #1073741824
 1474 0018 0260     		str	r2, [r0]
 263:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 1475              		.loc 1 263 3 is_stmt 1 view .LVU391
 263:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 1476              		.loc 1 263 24 is_stmt 0 view .LVU392
 1477 001a 4360     		str	r3, [r0, #4]
 264:Core/Src/main.c ****   htim2.Init.Period = 4294967295;
 1478              		.loc 1 264 3 is_stmt 1 view .LVU393
 264:Core/Src/main.c ****   htim2.Init.Period = 4294967295;
 1479              		.loc 1 264 26 is_stmt 0 view .LVU394
 1480 001c 8360     		str	r3, [r0, #8]
 265:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1481              		.loc 1 265 3 is_stmt 1 view .LVU395
 265:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1482              		.loc 1 265 21 is_stmt 0 view .LVU396
 1483 001e 4FF0FF32 		mov	r2, #-1
 1484 0022 C260     		str	r2, [r0, #12]
 266:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1485              		.loc 1 266 3 is_stmt 1 view .LVU397
 266:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 56


 1486              		.loc 1 266 28 is_stmt 0 view .LVU398
 1487 0024 0361     		str	r3, [r0, #16]
 267:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 1488              		.loc 1 267 3 is_stmt 1 view .LVU399
 267:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 1489              		.loc 1 267 32 is_stmt 0 view .LVU400
 1490 0026 8361     		str	r3, [r0, #24]
 268:Core/Src/main.c ****   {
 1491              		.loc 1 268 3 is_stmt 1 view .LVU401
 268:Core/Src/main.c ****   {
 1492              		.loc 1 268 7 is_stmt 0 view .LVU402
 1493 0028 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1494              	.LVL120:
 268:Core/Src/main.c ****   {
 1495              		.loc 1 268 6 discriminator 1 view .LVU403
 1496 002c 90B9     		cbnz	r0, .L75
 272:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 1497              		.loc 1 272 3 is_stmt 1 view .LVU404
 272:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 1498              		.loc 1 272 34 is_stmt 0 view .LVU405
 1499 002e 4FF48053 		mov	r3, #4096
 1500 0032 0293     		str	r3, [sp, #8]
 273:Core/Src/main.c ****   {
 1501              		.loc 1 273 3 is_stmt 1 view .LVU406
 273:Core/Src/main.c ****   {
 1502              		.loc 1 273 7 is_stmt 0 view .LVU407
 1503 0034 02A9     		add	r1, sp, #8
 1504 0036 0A48     		ldr	r0, .L78
 1505 0038 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1506              	.LVL121:
 273:Core/Src/main.c ****   {
 1507              		.loc 1 273 6 discriminator 1 view .LVU408
 1508 003c 60B9     		cbnz	r0, .L76
 277:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1509              		.loc 1 277 3 is_stmt 1 view .LVU409
 277:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1510              		.loc 1 277 37 is_stmt 0 view .LVU410
 1511 003e 0023     		movs	r3, #0
 1512 0040 0093     		str	r3, [sp]
 278:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 1513              		.loc 1 278 3 is_stmt 1 view .LVU411
 278:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 1514              		.loc 1 278 33 is_stmt 0 view .LVU412
 1515 0042 0193     		str	r3, [sp, #4]
 279:Core/Src/main.c ****   {
 1516              		.loc 1 279 3 is_stmt 1 view .LVU413
 279:Core/Src/main.c ****   {
 1517              		.loc 1 279 7 is_stmt 0 view .LVU414
 1518 0044 6946     		mov	r1, sp
 1519 0046 0648     		ldr	r0, .L78
 1520 0048 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1521              	.LVL122:
 279:Core/Src/main.c ****   {
 1522              		.loc 1 279 6 discriminator 1 view .LVU415
 1523 004c 30B9     		cbnz	r0, .L77
 287:Core/Src/main.c **** 
 1524              		.loc 1 287 1 view .LVU416
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 57


 1525 004e 07B0     		add	sp, sp, #28
 1526              	.LCFI21:
 1527              		.cfi_remember_state
 1528              		.cfi_def_cfa_offset 4
 1529              		@ sp needed
 1530 0050 5DF804FB 		ldr	pc, [sp], #4
 1531              	.L75:
 1532              	.LCFI22:
 1533              		.cfi_restore_state
 270:Core/Src/main.c ****   }
 1534              		.loc 1 270 5 is_stmt 1 view .LVU417
 1535 0054 FFF7FEFF 		bl	Error_Handler
 1536              	.LVL123:
 1537              	.L76:
 275:Core/Src/main.c ****   }
 1538              		.loc 1 275 5 view .LVU418
 1539 0058 FFF7FEFF 		bl	Error_Handler
 1540              	.LVL124:
 1541              	.L77:
 281:Core/Src/main.c ****   }
 1542              		.loc 1 281 5 view .LVU419
 1543 005c FFF7FEFF 		bl	Error_Handler
 1544              	.LVL125:
 1545              	.L79:
 1546              		.align	2
 1547              	.L78:
 1548 0060 00000000 		.word	htim2
 1549              		.cfi_endproc
 1550              	.LFE136:
 1552              		.section	.text.SystemClock_Config,"ax",%progbits
 1553              		.align	1
 1554              		.global	SystemClock_Config
 1555              		.syntax unified
 1556              		.thumb
 1557              		.thumb_func
 1559              	SystemClock_Config:
 1560              	.LFB135:
 203:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1561              		.loc 1 203 1 view -0
 1562              		.cfi_startproc
 1563              		@ args = 0, pretend = 0, frame = 80
 1564              		@ frame_needed = 0, uses_anonymous_args = 0
 1565 0000 00B5     		push	{lr}
 1566              	.LCFI23:
 1567              		.cfi_def_cfa_offset 4
 1568              		.cfi_offset 14, -4
 1569 0002 95B0     		sub	sp, sp, #84
 1570              	.LCFI24:
 1571              		.cfi_def_cfa_offset 88
 204:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1572              		.loc 1 204 3 view .LVU421
 204:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1573              		.loc 1 204 22 is_stmt 0 view .LVU422
 1574 0004 3422     		movs	r2, #52
 1575 0006 0021     		movs	r1, #0
 1576 0008 07A8     		add	r0, sp, #28
 1577 000a FFF7FEFF 		bl	memset
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 58


 1578              	.LVL126:
 205:Core/Src/main.c **** 
 1579              		.loc 1 205 3 is_stmt 1 view .LVU423
 205:Core/Src/main.c **** 
 1580              		.loc 1 205 22 is_stmt 0 view .LVU424
 1581 000e 0023     		movs	r3, #0
 1582 0010 0293     		str	r3, [sp, #8]
 1583 0012 0393     		str	r3, [sp, #12]
 1584 0014 0493     		str	r3, [sp, #16]
 1585 0016 0593     		str	r3, [sp, #20]
 1586 0018 0693     		str	r3, [sp, #24]
 209:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1587              		.loc 1 209 3 is_stmt 1 view .LVU425
 1588              	.LBB29:
 209:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1589              		.loc 1 209 3 view .LVU426
 1590 001a 0093     		str	r3, [sp]
 209:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1591              		.loc 1 209 3 view .LVU427
 1592 001c 214A     		ldr	r2, .L86
 1593 001e 116C     		ldr	r1, [r2, #64]
 1594 0020 41F08051 		orr	r1, r1, #268435456
 1595 0024 1164     		str	r1, [r2, #64]
 209:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1596              		.loc 1 209 3 view .LVU428
 1597 0026 126C     		ldr	r2, [r2, #64]
 1598 0028 02F08052 		and	r2, r2, #268435456
 1599 002c 0092     		str	r2, [sp]
 209:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1600              		.loc 1 209 3 view .LVU429
 1601 002e 009A     		ldr	r2, [sp]
 1602              	.LBE29:
 209:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1603              		.loc 1 209 3 view .LVU430
 210:Core/Src/main.c **** 
 1604              		.loc 1 210 3 view .LVU431
 1605              	.LBB30:
 210:Core/Src/main.c **** 
 1606              		.loc 1 210 3 view .LVU432
 1607 0030 0193     		str	r3, [sp, #4]
 210:Core/Src/main.c **** 
 1608              		.loc 1 210 3 view .LVU433
 1609 0032 1D4A     		ldr	r2, .L86+4
 1610 0034 1368     		ldr	r3, [r2]
 1611 0036 23F44043 		bic	r3, r3, #49152
 1612 003a 43F48043 		orr	r3, r3, #16384
 1613 003e 1360     		str	r3, [r2]
 210:Core/Src/main.c **** 
 1614              		.loc 1 210 3 view .LVU434
 1615 0040 1368     		ldr	r3, [r2]
 1616 0042 03F44043 		and	r3, r3, #49152
 1617 0046 0193     		str	r3, [sp, #4]
 210:Core/Src/main.c **** 
 1618              		.loc 1 210 3 view .LVU435
 1619 0048 019B     		ldr	r3, [sp, #4]
 1620              	.LBE30:
 210:Core/Src/main.c **** 
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 59


 1621              		.loc 1 210 3 view .LVU436
 215:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 1622              		.loc 1 215 3 view .LVU437
 215:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 1623              		.loc 1 215 36 is_stmt 0 view .LVU438
 1624 004a 0123     		movs	r3, #1
 1625 004c 0793     		str	r3, [sp, #28]
 216:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1626              		.loc 1 216 3 is_stmt 1 view .LVU439
 216:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1627              		.loc 1 216 30 is_stmt 0 view .LVU440
 1628 004e 4FF48033 		mov	r3, #65536
 1629 0052 0893     		str	r3, [sp, #32]
 217:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1630              		.loc 1 217 3 is_stmt 1 view .LVU441
 217:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1631              		.loc 1 217 34 is_stmt 0 view .LVU442
 1632 0054 0223     		movs	r3, #2
 1633 0056 0D93     		str	r3, [sp, #52]
 218:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 15;
 1634              		.loc 1 218 3 is_stmt 1 view .LVU443
 218:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 15;
 1635              		.loc 1 218 35 is_stmt 0 view .LVU444
 1636 0058 4FF48002 		mov	r2, #4194304
 1637 005c 0E92     		str	r2, [sp, #56]
 219:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 144;
 1638              		.loc 1 219 3 is_stmt 1 view .LVU445
 219:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 144;
 1639              		.loc 1 219 30 is_stmt 0 view .LVU446
 1640 005e 0F22     		movs	r2, #15
 1641 0060 0F92     		str	r2, [sp, #60]
 220:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1642              		.loc 1 220 3 is_stmt 1 view .LVU447
 220:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1643              		.loc 1 220 30 is_stmt 0 view .LVU448
 1644 0062 9022     		movs	r2, #144
 1645 0064 1092     		str	r2, [sp, #64]
 221:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 1646              		.loc 1 221 3 is_stmt 1 view .LVU449
 221:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 1647              		.loc 1 221 30 is_stmt 0 view .LVU450
 1648 0066 1193     		str	r3, [sp, #68]
 222:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 1649              		.loc 1 222 3 is_stmt 1 view .LVU451
 222:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 1650              		.loc 1 222 30 is_stmt 0 view .LVU452
 1651 0068 1293     		str	r3, [sp, #72]
 223:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1652              		.loc 1 223 3 is_stmt 1 view .LVU453
 223:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1653              		.loc 1 223 30 is_stmt 0 view .LVU454
 1654 006a 1393     		str	r3, [sp, #76]
 224:Core/Src/main.c ****   {
 1655              		.loc 1 224 3 is_stmt 1 view .LVU455
 224:Core/Src/main.c ****   {
 1656              		.loc 1 224 7 is_stmt 0 view .LVU456
 1657 006c 07A8     		add	r0, sp, #28
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 60


 1658 006e FFF7FEFF 		bl	HAL_RCC_OscConfig
 1659              	.LVL127:
 224:Core/Src/main.c ****   {
 1660              		.loc 1 224 6 discriminator 1 view .LVU457
 1661 0072 98B9     		cbnz	r0, .L84
 231:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1662              		.loc 1 231 3 is_stmt 1 view .LVU458
 231:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1663              		.loc 1 231 31 is_stmt 0 view .LVU459
 1664 0074 0F23     		movs	r3, #15
 1665 0076 0293     		str	r3, [sp, #8]
 233:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1666              		.loc 1 233 3 is_stmt 1 view .LVU460
 233:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1667              		.loc 1 233 34 is_stmt 0 view .LVU461
 1668 0078 0223     		movs	r3, #2
 1669 007a 0393     		str	r3, [sp, #12]
 234:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 1670              		.loc 1 234 3 is_stmt 1 view .LVU462
 234:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 1671              		.loc 1 234 35 is_stmt 0 view .LVU463
 1672 007c 0023     		movs	r3, #0
 1673 007e 0493     		str	r3, [sp, #16]
 235:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 1674              		.loc 1 235 3 is_stmt 1 view .LVU464
 235:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 1675              		.loc 1 235 36 is_stmt 0 view .LVU465
 1676 0080 4FF4A053 		mov	r3, #5120
 1677 0084 0593     		str	r3, [sp, #20]
 236:Core/Src/main.c **** 
 1678              		.loc 1 236 3 is_stmt 1 view .LVU466
 236:Core/Src/main.c **** 
 1679              		.loc 1 236 36 is_stmt 0 view .LVU467
 1680 0086 4FF48053 		mov	r3, #4096
 1681 008a 0693     		str	r3, [sp, #24]
 238:Core/Src/main.c ****   {
 1682              		.loc 1 238 3 is_stmt 1 view .LVU468
 238:Core/Src/main.c ****   {
 1683              		.loc 1 238 7 is_stmt 0 view .LVU469
 1684 008c 0321     		movs	r1, #3
 1685 008e 02A8     		add	r0, sp, #8
 1686 0090 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1687              	.LVL128:
 238:Core/Src/main.c ****   {
 1688              		.loc 1 238 6 discriminator 1 view .LVU470
 1689 0094 20B9     		cbnz	r0, .L85
 242:Core/Src/main.c **** 
 1690              		.loc 1 242 1 view .LVU471
 1691 0096 15B0     		add	sp, sp, #84
 1692              	.LCFI25:
 1693              		.cfi_remember_state
 1694              		.cfi_def_cfa_offset 4
 1695              		@ sp needed
 1696 0098 5DF804FB 		ldr	pc, [sp], #4
 1697              	.L84:
 1698              	.LCFI26:
 1699              		.cfi_restore_state
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 61


 226:Core/Src/main.c ****   }
 1700              		.loc 1 226 5 is_stmt 1 view .LVU472
 1701 009c FFF7FEFF 		bl	Error_Handler
 1702              	.LVL129:
 1703              	.L85:
 240:Core/Src/main.c ****   }
 1704              		.loc 1 240 5 view .LVU473
 1705 00a0 FFF7FEFF 		bl	Error_Handler
 1706              	.LVL130:
 1707              	.L87:
 1708              		.align	2
 1709              	.L86:
 1710 00a4 00380240 		.word	1073887232
 1711 00a8 00700040 		.word	1073770496
 1712              		.cfi_endproc
 1713              	.LFE135:
 1715              		.section	.text.main,"ax",%progbits
 1716              		.align	1
 1717              		.global	main
 1718              		.syntax unified
 1719              		.thumb
 1720              		.thumb_func
 1722              	main:
 1723              	.LFB134:
  98:Core/Src/main.c **** 
 1724              		.loc 1 98 1 view -0
 1725              		.cfi_startproc
 1726              		@ args = 0, pretend = 0, frame = 8
 1727              		@ frame_needed = 0, uses_anonymous_args = 0
 1728 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1729              	.LCFI27:
 1730              		.cfi_def_cfa_offset 36
 1731              		.cfi_offset 4, -36
 1732              		.cfi_offset 5, -32
 1733              		.cfi_offset 6, -28
 1734              		.cfi_offset 7, -24
 1735              		.cfi_offset 8, -20
 1736              		.cfi_offset 9, -16
 1737              		.cfi_offset 10, -12
 1738              		.cfi_offset 11, -8
 1739              		.cfi_offset 14, -4
 1740 0004 83B0     		sub	sp, sp, #12
 1741              	.LCFI28:
 1742              		.cfi_def_cfa_offset 48
 107:Core/Src/main.c **** 
 1743              		.loc 1 107 3 view .LVU475
 1744 0006 FFF7FEFF 		bl	HAL_Init
 1745              	.LVL131:
 114:Core/Src/main.c **** 
 1746              		.loc 1 114 3 view .LVU476
 1747 000a FFF7FEFF 		bl	SystemClock_Config
 1748              	.LVL132:
 121:Core/Src/main.c ****   MX_TIM2_Init();
 1749              		.loc 1 121 3 view .LVU477
 1750 000e FFF7FEFF 		bl	MX_GPIO_Init
 1751              	.LVL133:
 122:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 62


 1752              		.loc 1 122 3 view .LVU478
 1753 0012 FFF7FEFF 		bl	MX_TIM2_Init
 1754              	.LVL134:
 137:Core/Src/main.c **** 
 1755              		.loc 1 137 6 view .LVU479
 1756 0016 4648     		ldr	r0, .L95
 1757 0018 FFF7FEFF 		bl	HAL_TIM_Base_Start
 1758              	.LVL135:
 140:Core/Src/main.c **** 
 1759              		.loc 1 140 4 view .LVU480
 1760 001c 0122     		movs	r2, #1
 1761 001e 1146     		mov	r1, r2
 1762 0020 4448     		ldr	r0, .L95+4
 1763 0022 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1764              	.LVL136:
 148:Core/Src/main.c **** 	    {
 1765              		.loc 1 148 4 view .LVU481
 1766              	.LBB31:
 148:Core/Src/main.c **** 	    {
 1767              		.loc 1 148 9 view .LVU482
 148:Core/Src/main.c **** 	    {
 1768              		.loc 1 148 13 is_stmt 0 view .LVU483
 1769 0026 0024     		movs	r4, #0
 148:Core/Src/main.c **** 	    {
 1770              		.loc 1 148 4 view .LVU484
 1771 0028 21E0     		b	.L89
 1772              	.LVL137:
 1773              	.L90:
 1774              	.LBB32:
 179:Core/Src/main.c **** 
 1775              		.loc 1 179 7 is_stmt 1 view .LVU485
 179:Core/Src/main.c **** 
 1776              		.loc 1 179 50 is_stmt 0 view .LVU486
 1777 002a B9EB0306 		subs	r6, r9, r3
 1778 002e 62EB4203 		sbc	r3, r2, r2, lsl #1
 179:Core/Src/main.c **** 
 1779              		.loc 1 179 60 view .LVU487
 1780 0032 0133     		adds	r3, r3, #1
 179:Core/Src/main.c **** 
 1781              		.loc 1 179 23 view .LVU488
 1782 0034 B619     		adds	r6, r6, r6
 1783 0036 5B41     		adcs	r3, r3, r3
 179:Core/Src/main.c **** 
 1784              		.loc 1 179 20 view .LVU489
 1785 0038 3F4A     		ldr	r2, .L95+8
 1786 003a 02EBC401 		add	r1, r2, r4, lsl #3
 1787 003e 42F83460 		str	r6, [r2, r4, lsl #3]
 1788 0042 4B60     		str	r3, [r1, #4]
 1789              	.L91:
 185:Core/Src/main.c **** 
 1790              		.loc 1 185 5 is_stmt 1 view .LVU490
 1791 0044 3B4D     		ldr	r5, .L95+4
 1792 0046 0122     		movs	r2, #1
 1793 0048 0221     		movs	r1, #2
 1794 004a 2846     		mov	r0, r5
 1795 004c FFF7FEFF 		bl	HAL_GPIO_WritePin
 1796              	.LVL138:
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 63


 188:Core/Src/main.c **** 
 1797              		.loc 1 188 5 view .LVU491
 1798 0050 4FF4FA60 		mov	r0, #2000
 1799 0054 FFF7FEFF 		bl	HAL_Delay
 1800              	.LVL139:
 191:Core/Src/main.c **** 				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 1801              		.loc 1 191 5 view .LVU492
 1802 0058 0022     		movs	r2, #0
 1803 005a 0121     		movs	r1, #1
 1804 005c 2846     		mov	r0, r5
 1805 005e FFF7FEFF 		bl	HAL_GPIO_WritePin
 1806              	.LVL140:
 192:Core/Src/main.c **** 	    }
 1807              		.loc 1 192 5 view .LVU493
 1808 0062 0022     		movs	r2, #0
 1809 0064 0221     		movs	r1, #2
 1810 0066 2846     		mov	r0, r5
 1811 0068 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1812              	.LVL141:
 1813              	.LBE32:
 148:Core/Src/main.c **** 	    {
 1814              		.loc 1 148 36 discriminator 2 view .LVU494
 1815 006c 0134     		adds	r4, r4, #1
 1816              	.LVL142:
 1817              	.L89:
 148:Core/Src/main.c **** 	    {
 1818              		.loc 1 148 22 discriminator 1 view .LVU495
 1819 006e 334B     		ldr	r3, .L95+12
 1820 0070 1B68     		ldr	r3, [r3]
 1821 0072 A342     		cmp	r3, r4
 1822 0074 58DD     		ble	.L94
 1823              	.LBB33:
 150:Core/Src/main.c **** 
 1824              		.loc 1 150 10 view .LVU496
 150:Core/Src/main.c **** 
 1825              		.loc 1 150 14 is_stmt 0 view .LVU497
 1826 0076 324B     		ldr	r3, .L95+16
 1827 0078 53F82450 		ldr	r5, [r3, r4, lsl #2]
 1828              	.LVL143:
 153:Core/Src/main.c **** 
 1829              		.loc 1 153 6 is_stmt 1 view .LVU498
 153:Core/Src/main.c **** 
 1830              		.loc 1 153 19 is_stmt 0 view .LVU499
 1831 007c FFF7FEFF 		bl	HAL_GetTick
 1832              	.LVL144:
 153:Core/Src/main.c **** 
 1833              		.loc 1 153 17 discriminator 1 view .LVU500
 1834 0080 DFF8D8A0 		ldr	r10, .L95+44
 1835 0084 CAF80000 		str	r0, [r10]
 156:Core/Src/main.c **** 
 1836              		.loc 1 156 6 is_stmt 1 view .LVU501
 156:Core/Src/main.c **** 
 1837              		.loc 1 156 18 is_stmt 0 view .LVU502
 1838 0088 294E     		ldr	r6, .L95
 1839 008a 3368     		ldr	r3, [r6]
 1840 008c 5B6A     		ldr	r3, [r3, #36]
 1841 008e 0027     		movs	r7, #0
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 64


 156:Core/Src/main.c **** 
 1842              		.loc 1 156 16 view .LVU503
 1843 0090 DFF8CC80 		ldr	r8, .L95+48
 1844 0094 C8F80030 		str	r3, [r8]
 1845 0098 C8F80470 		str	r7, [r8, #4]
 159:Core/Src/main.c **** 			  //using striping
 1846              		.loc 1 159 6 is_stmt 1 view .LVU504
 159:Core/Src/main.c **** 			  //using striping
 1847              		.loc 1 159 21 is_stmt 0 view .LVU505
 1848 009c 6422     		movs	r2, #100
 1849 009e 2946     		mov	r1, r5
 1850 00a0 2846     		mov	r0, r5
 1851 00a2 FFF7FEFF 		bl	calculate_mandelbrot_fixed_point_arithmetic_no_overflow
 1852              	.LVL145:
 159:Core/Src/main.c **** 			  //using striping
 1853              		.loc 1 159 19 discriminator 1 view .LVU506
 1854 00a6 4FEAC40B 		lsl	fp, r4, #3
 1855 00aa 264B     		ldr	r3, .L95+20
 1856 00ac 03EBC403 		add	r3, r3, r4, lsl #3
 1857 00b0 C3E90001 		strd	r0, [r3]
 165:Core/Src/main.c **** 			  // Cycle counter end
 1858              		.loc 1 165 6 is_stmt 1 view .LVU507
 165:Core/Src/main.c **** 			  // Cycle counter end
 1859              		.loc 1 165 17 is_stmt 0 view .LVU508
 1860 00b4 FFF7FEFF 		bl	HAL_GetTick
 1861              	.LVL146:
 165:Core/Src/main.c **** 			  // Cycle counter end
 1862              		.loc 1 165 15 discriminator 1 view .LVU509
 1863 00b8 234B     		ldr	r3, .L95+24
 1864 00ba 1860     		str	r0, [r3]
 167:Core/Src/main.c **** 
 1865              		.loc 1 167 6 is_stmt 1 view .LVU510
 167:Core/Src/main.c **** 
 1866              		.loc 1 167 16 is_stmt 0 view .LVU511
 1867 00bc 3368     		ldr	r3, [r6]
 1868 00be D3F82490 		ldr	r9, [r3, #36]
 167:Core/Src/main.c **** 
 1869              		.loc 1 167 14 view .LVU512
 1870 00c2 224B     		ldr	r3, .L95+28
 1871 00c4 C3F80090 		str	r9, [r3]
 1872 00c8 5F60     		str	r7, [r3, #4]
 171:Core/Src/main.c **** 			  throughput[i] = (current_size*current_size)/(execution_times[i]/1000.0); //Throughput in pixel
 1873              		.loc 1 171 6 is_stmt 1 view .LVU513
 171:Core/Src/main.c **** 			  throughput[i] = (current_size*current_size)/(execution_times[i]/1000.0); //Throughput in pixel
 1874              		.loc 1 171 36 is_stmt 0 view .LVU514
 1875 00ca DAF80030 		ldr	r3, [r10]
 1876 00ce C01A     		subs	r0, r0, r3
 171:Core/Src/main.c **** 			  throughput[i] = (current_size*current_size)/(execution_times[i]/1000.0); //Throughput in pixel
 1877              		.loc 1 171 25 view .LVU515
 1878 00d0 1F4B     		ldr	r3, .L95+32
 1879 00d2 43F82400 		str	r0, [r3, r4, lsl #2]
 172:Core/Src/main.c **** 
 1880              		.loc 1 172 6 is_stmt 1 view .LVU516
 172:Core/Src/main.c **** 
 1881              		.loc 1 172 35 is_stmt 0 view .LVU517
 1882 00d6 05FB05F5 		mul	r5, r5, r5
 1883              	.LVL147:
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 65


 172:Core/Src/main.c **** 
 1884              		.loc 1 172 69 view .LVU518
 1885 00da FFF7FEFF 		bl	__aeabi_ui2d
 1886              	.LVL148:
 1887 00de 0022     		movs	r2, #0
 1888 00e0 1C4B     		ldr	r3, .L95+36
 1889 00e2 FFF7FEFF 		bl	__aeabi_ddiv
 1890              	.LVL149:
 1891 00e6 CDE90001 		strd	r0, [sp]
 172:Core/Src/main.c **** 
 1892              		.loc 1 172 49 view .LVU519
 1893 00ea 2846     		mov	r0, r5
 1894 00ec FFF7FEFF 		bl	__aeabi_i2d
 1895              	.LVL150:
 1896 00f0 DDE90023 		ldrd	r2, [sp]
 1897 00f4 FFF7FEFF 		bl	__aeabi_ddiv
 1898              	.LVL151:
 172:Core/Src/main.c **** 
 1899              		.loc 1 172 20 view .LVU520
 1900 00f8 174B     		ldr	r3, .L95+40
 1901 00fa 5B44     		add	r3, r3, fp
 1902 00fc C3E90001 		strd	r0, [r3]
 176:Core/Src/main.c **** 				  cycle_cnt[i] = 2*(end_cnt - start_cnt);
 1903              		.loc 1 176 6 is_stmt 1 view .LVU521
 176:Core/Src/main.c **** 				  cycle_cnt[i] = 2*(end_cnt - start_cnt);
 1904              		.loc 1 176 18 is_stmt 0 view .LVU522
 1905 0100 D8F80030 		ldr	r3, [r8]
 1906 0104 D8F80420 		ldr	r2, [r8, #4]
 176:Core/Src/main.c **** 				  cycle_cnt[i] = 2*(end_cnt - start_cnt);
 1907              		.loc 1 176 9 view .LVU523
 1908 0108 9945     		cmp	r9, r3
 1909 010a 9741     		sbcs	r7, r7, r2
 1910 010c 8DD3     		bcc	.L90
 177:Core/Src/main.c **** 			  else
 1911              		.loc 1 177 7 is_stmt 1 view .LVU524
 177:Core/Src/main.c **** 			  else
 1912              		.loc 1 177 33 is_stmt 0 view .LVU525
 1913 010e B9EB0303 		subs	r3, r9, r3
 1914 0112 62EB4202 		sbc	r2, r2, r2, lsl #1
 177:Core/Src/main.c **** 			  else
 1915              		.loc 1 177 23 view .LVU526
 1916 0116 DB18     		adds	r3, r3, r3
 1917 0118 5241     		adcs	r2, r2, r2
 177:Core/Src/main.c **** 			  else
 1918              		.loc 1 177 20 view .LVU527
 1919 011a 0749     		ldr	r1, .L95+8
 1920 011c 01EBC400 		add	r0, r1, r4, lsl #3
 1921 0120 41F83430 		str	r3, [r1, r4, lsl #3]
 1922 0124 4260     		str	r2, [r0, #4]
 1923 0126 8DE7     		b	.L91
 1924              	.LVL152:
 1925              	.L94:
 177:Core/Src/main.c **** 			  else
 1926              		.loc 1 177 20 view .LVU528
 1927              	.LBE33:
 1928              	.LBE31:
 194:Core/Src/main.c ****   /* USER CODE END 3 */
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 66


 1929              		.loc 1 194 3 view .LVU529
 1930 0128 0020     		movs	r0, #0
 1931 012a 03B0     		add	sp, sp, #12
 1932              	.LCFI29:
 1933              		.cfi_def_cfa_offset 36
 1934              		@ sp needed
 1935 012c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1936              	.LVL153:
 1937              	.L96:
 194:Core/Src/main.c ****   /* USER CODE END 3 */
 1938              		.loc 1 194 3 view .LVU530
 1939              		.align	2
 1940              	.L95:
 1941 0130 00000000 		.word	htim2
 1942 0134 00040240 		.word	1073873920
 1943 0138 00000000 		.word	cycle_cnt
 1944 013c 00000000 		.word	num_sizes
 1945 0140 00000000 		.word	sizes
 1946 0144 00000000 		.word	checksums
 1947 0148 00000000 		.word	end_time
 1948 014c 00000000 		.word	end_cnt
 1949 0150 00000000 		.word	execution_times
 1950 0154 00408F40 		.word	1083129856
 1951 0158 00000000 		.word	throughput
 1952 015c 00000000 		.word	start_time
 1953 0160 00000000 		.word	start_cnt
 1954              		.cfi_endproc
 1955              	.LFE134:
 1957              		.global	throughput
 1958              		.section	.bss.throughput,"aw",%nobits
 1959              		.align	3
 1962              	throughput:
 1963 0000 00000000 		.space	40
 1963      00000000 
 1963      00000000 
 1963      00000000 
 1963      00000000 
 1964              		.global	cycle_cnt
 1965              		.section	.bss.cycle_cnt,"aw",%nobits
 1966              		.align	3
 1969              	cycle_cnt:
 1970 0000 00000000 		.space	40
 1970      00000000 
 1970      00000000 
 1970      00000000 
 1970      00000000 
 1971              		.global	execution_times
 1972              		.section	.bss.execution_times,"aw",%nobits
 1973              		.align	2
 1976              	execution_times:
 1977 0000 00000000 		.space	20
 1977      00000000 
 1977      00000000 
 1977      00000000 
 1977      00000000 
 1978              		.global	checksums
 1979              		.section	.bss.checksums,"aw",%nobits
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 67


 1980              		.align	3
 1983              	checksums:
 1984 0000 00000000 		.space	40
 1984      00000000 
 1984      00000000 
 1984      00000000 
 1984      00000000 
 1985              		.global	rows
 1986              		.section	.data.rows,"aw"
 1987              		.align	2
 1990              	rows:
 1991 0000 08000000 		.word	8
 1992              		.global	num_sizes
 1993              		.section	.data.num_sizes,"aw"
 1994              		.align	2
 1997              	num_sizes:
 1998 0000 05000000 		.word	5
 1999              		.global	sizes
 2000              		.section	.data.sizes,"aw"
 2001              		.align	2
 2004              	sizes:
 2005 0000 80000000 		.word	128
 2006 0004 A0000000 		.word	160
 2007 0008 C0000000 		.word	192
 2008 000c E0000000 		.word	224
 2009 0010 00010000 		.word	256
 2010              		.global	end_cnt
 2011              		.section	.bss.end_cnt,"aw",%nobits
 2012              		.align	3
 2015              	end_cnt:
 2016 0000 00000000 		.space	8
 2016      00000000 
 2017              		.global	start_cnt
 2018              		.section	.bss.start_cnt,"aw",%nobits
 2019              		.align	3
 2022              	start_cnt:
 2023 0000 00000000 		.space	8
 2023      00000000 
 2024              		.global	pin_mask
 2025              		.section	.bss.pin_mask,"aw",%nobits
 2026              		.align	1
 2029              	pin_mask:
 2030 0000 0000     		.space	2
 2031              		.global	end_time
 2032              		.section	.bss.end_time,"aw",%nobits
 2033              		.align	2
 2036              	end_time:
 2037 0000 00000000 		.space	4
 2038              		.global	start_time
 2039              		.section	.bss.start_time,"aw",%nobits
 2040              		.align	2
 2043              	start_time:
 2044 0000 00000000 		.space	4
 2045              		.global	htim2
 2046              		.section	.bss.htim2,"aw",%nobits
 2047              		.align	2
 2050              	htim2:
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 68


 2051 0000 00000000 		.space	72
 2051      00000000 
 2051      00000000 
 2051      00000000 
 2051      00000000 
 2052              		.text
 2053              	.Letext0:
 2054              		.file 3 "C:\\ST\\STM32CubeIDE_1.19.0\\STM32CubeIDE\\plugins\\com.st.stm32cube.ide.mcu.externaltool
 2055              		.file 4 "C:\\ST\\STM32CubeIDE_1.19.0\\STM32CubeIDE\\plugins\\com.st.stm32cube.ide.mcu.externaltool
 2056              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 2057              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 2058              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 2059              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 2060              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 2061              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 2062              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 2063              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 2064              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 2065              		.file 14 "<built-in>"
ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 69


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:21     .text.MX_GPIO_Init:00000000 $t
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:26     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:133    .text.MX_GPIO_Init:00000074 $d
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:139    .text.calculate_mandelbrot_fixed_point_arithmetic:00000000 $t
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:145    .text.calculate_mandelbrot_fixed_point_arithmetic:00000000 calculate_mandelbrot_fixed_point_arithmetic
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:380    .text.calculate_mandelbrot_fixed_point_arithmetic:00000100 $d
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:391    .text.calculate_mandelbrot_fixed_point_arithmetic_no_overflow:00000000 $t
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:397    .text.calculate_mandelbrot_fixed_point_arithmetic_no_overflow:00000000 calculate_mandelbrot_fixed_point_arithmetic_no_overflow
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:719    .text.calculate_mandelbrot_fixed_point_arithmetic_no_overflow:000001e8 $d
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:728    .text.mandelbrot_sum_stripe:00000000 $t
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:734    .text.mandelbrot_sum_stripe:00000000 mandelbrot_sum_stripe
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:986    .text.mandelbrot_sum_stripe:00000124 $d
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:992    .text.calculate_mandelbrot_striped_total:00000000 $t
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:998    .text.calculate_mandelbrot_striped_total:00000000 calculate_mandelbrot_striped_total
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:1106   .text.calculate_mandelbrot_double:00000000 $t
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:1112   .text.calculate_mandelbrot_double:00000000 calculate_mandelbrot_double
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:1395   .text.calculate_mandelbrot_double:00000158 $d
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:1403   .text.Error_Handler:00000000 $t
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:1409   .text.Error_Handler:00000000 Error_Handler
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:1441   .text.MX_TIM2_Init:00000000 $t
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:1446   .text.MX_TIM2_Init:00000000 MX_TIM2_Init
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:1548   .text.MX_TIM2_Init:00000060 $d
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:2050   .bss.htim2:00000000 htim2
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:1553   .text.SystemClock_Config:00000000 $t
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:1559   .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:1710   .text.SystemClock_Config:000000a4 $d
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:1716   .text.main:00000000 $t
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:1722   .text.main:00000000 main
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:1941   .text.main:00000130 $d
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:1969   .bss.cycle_cnt:00000000 cycle_cnt
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:1997   .data.num_sizes:00000000 num_sizes
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:2004   .data.sizes:00000000 sizes
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:1983   .bss.checksums:00000000 checksums
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:2036   .bss.end_time:00000000 end_time
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:2015   .bss.end_cnt:00000000 end_cnt
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:1976   .bss.execution_times:00000000 execution_times
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:1962   .bss.throughput:00000000 throughput
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:2043   .bss.start_time:00000000 start_time
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:2022   .bss.start_cnt:00000000 start_cnt
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:1959   .bss.throughput:00000000 $d
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:1966   .bss.cycle_cnt:00000000 $d
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:1973   .bss.execution_times:00000000 $d
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:1980   .bss.checksums:00000000 $d
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:1990   .data.rows:00000000 rows
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:1987   .data.rows:00000000 $d
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:1994   .data.num_sizes:00000000 $d
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:2001   .data.sizes:00000000 $d
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:2012   .bss.end_cnt:00000000 $d
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:2019   .bss.start_cnt:00000000 $d
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:2029   .bss.pin_mask:00000000 pin_mask
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:2026   .bss.pin_mask:00000000 $d
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:2033   .bss.end_time:00000000 $d
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:2040   .bss.start_time:00000000 $d
C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s:2047   .bss.htim2:00000000 $d

ARM GAS  C:\Users\thoma\AppData\Local\Temp\ccqrAlzC.s 			page 70


UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
__aeabi_ldivmod
__aeabi_ui2d
__aeabi_i2d
__aeabi_ddiv
__aeabi_dmul
__aeabi_dsub
__aeabi_dadd
__aeabi_dcmple
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
HAL_TIM_Base_Start
HAL_Delay
HAL_GetTick
